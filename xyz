
============================
Agentic Framework: DuckDB Tables
============================

1. sessions
-----------
Stores overall session metadata (one session = one full orchestration run that may have multiple iterations).

DDL:
CREATE TABLE sessions (
    session_id UUID,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    status TEXT,
    created_by TEXT,
    max_iterations INTEGER,
    final_result TEXT
);

When to insert:
- At the start of the workflow in workflow.py (Orchestrator).
- Generate UUID for session_id.
- Update end_time and final_result at end of the process.

-------------------------------------------------------

2. iterations
-------------
Tracks each attempt (iteration) within a session. Each retry = a new iteration.

DDL:
CREATE TABLE iterations (
    iteration_id UUID,
    session_id UUID,
    iteration_number INTEGER,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    needs_retry BOOLEAN,
    reason TEXT
);

When to insert:
- Start of each iteration loop (in Orchestrator).
- Generate new iteration_id UUID.
- Set needs_retry=True if analyser suggests another try.
- Update end_time when all agents finish.

-------------------------------------------------------

3. agent_runs
-------------
Captures each agent execution within an iteration.

DDL:
CREATE TABLE agent_runs (
    agent_run_id UUID,
    iteration_id UUID,
    session_id UUID,
    agent_name TEXT,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    status TEXT,
    error_message TEXT
);

When to insert:
- At the start of each agent (converter.py, deployer.py, recon.py, analyser.py).
- Set status = "success" or "failed".
- Insert error_message if applicable.

-------------------------------------------------------

4. agent_inputs
---------------
Stores prompt/context provided to each agent.

DDL:
CREATE TABLE agent_inputs (
    agent_run_id UUID,
    input_type TEXT,
    input_data TEXT
);

When to insert:
- Inside each agent before calling the model/tool.
- Save all relevant prompts or structured inputs.

-------------------------------------------------------

5. agent_outputs
----------------
Stores result returned by agent (e.g. PySpark code, analysis results).

DDL:
CREATE TABLE agent_outputs (
    agent_run_id UUID,
    output_type TEXT,
    output_data TEXT
);

When to insert:
- After the agent finishes execution.
- Save output string or result object.

-------------------------------------------------------

Suggested Order of Use
-----------------------
1. Orchestrator (workflow.py) creates new session_id and inserts into sessions.
2. For each iteration:
    - Insert into iterations with new iteration_id.
    - For each agent:
        - Generate agent_run_id
        - Insert into agent_runs (before and update after run)
        - Insert into agent_inputs (prompt or input data)
        - Insert into agent_outputs (final result)
3. After all agents complete:
    - Orchestrator updates the iteration and session end_time/status.
    - If analyser flags issues, start next iteration (up to 3â€“4 max).


You can create a agent_activity_log view for reporting:

sql
Copy
Edit
CREATE VIEW agent_activity_log AS
SELECT 
  s.session_id,
  i.iteration_number,
  a.agent_name,
  a.status,
  a.start_time,
  a.end_time,
  ai.input_type,
  ai.input_data,
  ao.output_type,
  ao.output_data
FROM sessions s
JOIN iterations i ON s.session_id = i.session_id
JOIN agent_runs a ON a.iteration_id = i.iteration_id
LEFT JOIN agent_inputs ai ON ai.agent_run_id = a.agent_run_id
LEFT JOIN agent_outputs ao ON ao.agent_run_id = a.agent_run_id;

<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agent Orchestrator - DB Schema View</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        slate: {
                            950: '#090e1a',
                            900: '#0f172a',
                            800: '#1e293b',
                            700: '#334155',
                            600: '#475569',
                        },
                        amber: {
                            300: '#fcd34d',
                            400: '#fbbf24',
                            500: '#f59e0b',
                        }
                    }
                }
            }
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #090e1a; /* slate-950 */
        }
        .custom-scrollbar::-webkit-scrollbar { width: 6px; }
        .custom-scrollbar::-webkit-scrollbar-track { background: transparent; }
        .custom-scrollbar::-webkit-scrollbar-thumb { background: #475569; border-radius: 3px; }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #334155; }
    </style>
</head>
<body class="text-slate-300 flex h-screen w-full overflow-hidden">

    <!-- Column 1: Sessions List -->
    <aside id="sessions-column" class="w-full max-w-[280px] bg-slate-950 border-r border-slate-800 flex flex-col h-full">
        <div class="p-4 border-b border-slate-800 flex-shrink-0">
            <h1 class="text-xl font-bold text-white">Agent Command Center</h1>
            <p class="text-sm text-slate-400">Execution Monitor</p>
        </div>
        <nav id="session-list" class="flex-1 p-2 space-y-1 overflow-y-auto custom-scrollbar">
            <!-- Session items will be injected by JS -->
        </nav>
    </aside>

    <!-- Column 2: Iterations & Agent Runs -->
    <section id="flow-column" class="flex-1 flex flex-col h-full border-r border-slate-800 min-w-[320px]">
        <!-- Flow content will be injected by JS -->
    </section>

    <!-- Column 3: Agent Details -->
    <section id="details-column" class="w-full max-w-md lg:max-w-lg xl:max-w-2xl bg-slate-950/50 flex flex-col h-full">
        <!-- Detail content will be injected by JS -->
    </section>

    <script type="module">
        // --- MOCK DATABASE (based on new schema) ---
        const db = {
            sessions: [
                { session_id: 'session-uuid-1', start_time: '2025-07-22T21:00:00Z', end_time: '2025-07-22T21:03:30Z', status: 'Completed', created_by: 'user_a', max_iterations: 3, final_result: 'Success' },
                { session_id: 'session-uuid-2', start_time: '2025-07-22T21:15:00Z', end_time: null, status: 'In Progress', created_by: 'user_b', max_iterations: 3, final_result: null },
            ],
            iterations: [
                // Iterations for session-uuid-1
                { iteration_id: 'iter-uuid-1-1', session_id: 'session-uuid-1', iteration_number: 1, start_time: '2025-07-22T21:00:05Z', end_time: '2025-07-22T21:01:20Z', needs_retry: true, reason: 'Reconciliation failed due to function incompatibility.' },
                { iteration_id: 'iter-uuid-1-2', session_id: 'session-uuid-1', iteration_number: 2, start_time: '2025-07-22T21:01:25Z', end_time: '2025-07-22T21:03:30Z', needs_retry: false, reason: null },
                 // Iterations for session-uuid-2
                { iteration_id: 'iter-uuid-2-1', session_id: 'session-uuid-2', iteration_number: 1, start_time: '2025-07-22T21:15:05Z', end_time: null, needs_retry: false, reason: null },
            ],
            agent_runs: [
                // Runs for iter-uuid-1-1
                { agent_run_id: 'run-uuid-1-1-1', iteration_id: 'iter-uuid-1-1', session_id: 'session-uuid-1', agent_name: 'SQL to PySpark Converter', start_time: '2025-07-22T21:00:05Z', end_time: '2025-07-22T21:00:30Z', status: 'Completed', error_message: null },
                { agent_run_id: 'run-uuid-1-1-2', iteration_id: 'iter-uuid-1-1', session_id: 'session-uuid-1', agent_name: 'Reconciliation Agent', start_time: '2025-07-22T21:00:35Z', end_time: '2025-07-22T21:01:00Z', status: 'Failed', error_message: "PySpark execution failed. AnalysisException: Undefined function: 'DATEADD'." },
                { agent_run_id: 'run-uuid-1-1-3', iteration_id: 'iter-uuid-1-1', session_id: 'session-uuid-1', agent_name: 'Analyzer Agent', start_time: '2025-07-22T21:01:05Z', end_time: '2025-07-22T21:01:20Z', status: 'Completed', error_message: null },
                // Runs for iter-uuid-1-2 (the retry)
                { agent_run_id: 'run-uuid-1-2-1', iteration_id: 'iter-uuid-1-2', session_id: 'session-uuid-1', agent_name: 'SQL to PySpark Converter', start_time: '2025-07-22T21:01:25Z', end_time: '2025-07-22T21:01:50Z', status: 'Completed', error_message: null },
                { agent_run_id: 'run-uuid-1-2-2', iteration_id: 'iter-uuid-1-2', session_id: 'session-uuid-1', agent_name: 'Reconciliation Agent', start_time: '2025-07-22T21:01:55Z', end_time: '2025-07-22T21:03:30Z', status: 'Completed', error_message: null },
                // Runs for iter-uuid-2-1
                { agent_run_id: 'run-uuid-2-1-1', iteration_id: 'iter-uuid-2-1', session_id: 'session-uuid-2', agent_name: 'SQL to PySpark Converter', start_time: '2025-07-22T21:15:05Z', end_time: '2025-07-22T21:15:45Z', status: 'Completed', error_message: null },
                { agent_run_id: 'run-uuid-2-1-2', iteration_id: 'iter-uuid-2-1', session_id: 'session-uuid-2', agent_name: 'Reconciliation Agent', start_time: '2025-07-22T21:15:50Z', end_time: null, status: 'In Progress', error_message: null },
            ],
            agent_inputs: [
                { agent_run_id: 'run-uuid-1-1-1', input_type: 'sql_query', input_data: "SELECT order_id, DATEADD(day, 5, order_date) as promised_date FROM orders;" },
                { agent_run_id: 'run-uuid-1-1-2', input_type: 'comparison_config', input_data: "{'source': 'sql_server', 'target': 'databricks'}" },
                { agent_run_id: 'run-uuid-1-1-3', input_type: 'error_report', input_data: "Reconciliation failed with error: Undefined function: 'DATEADD'" },
                { agent_run_id: 'run-uuid-1-2-1', input_type: 'sql_query_with_suggestion', input_data: "Original SQL: SELECT order_id, DATEADD(day, 5, order_date) as promised_date FROM orders;\nAnalyzer Suggestion: Translate DATEADD to date_add." },
                { agent_run_id: 'run-uuid-1-2-2', input_type: 'comparison_config', input_data: "{'source': 'sql_server', 'target': 'databricks'}" },
                { agent_run_id: 'run-uuid-2-1-1', input_type: 'sql_query', input_data: "SELECT * FROM customers;" },
                { agent_run_id: 'run-uuid-2-1-2', input_type: 'comparison_config', input_data: "{'source': 'sql_server', 'target': 'databricks'}" },
            ],
            agent_outputs: [
                { agent_run_id: 'run-uuid-1-1-1', output_type: 'pyspark_code', output_data: `df = spark.table("orders").withColumn("promised_date", F.expr("DATEADD(day, 5, order_date)"))` },
                { agent_run_id: 'run-uuid-1-1-2', output_type: 'error_log', output_data: "PySpark execution failed. AnalysisException: Undefined function: 'DATEADD'." },
                { agent_run_id: 'run-uuid-1-1-3', output_type: 'analysis_result', output_data: `{"needs_retry": true, "suggestion": "The SQL function 'DATEADD' is not directly compatible with PySpark's 'expr'. The correct PySpark function is 'date_add'. Modify the prompt to handle this translation."}` },
                { agent_run_id: 'run-uuid-1-2-1', output_type: 'pyspark_code', output_data: `from pyspark.sql import functions as F\ndf = spark.table("orders").withColumn("promised_date", F.date_add(F.col("order_date"), 5))` },
                { agent_run_id: 'run-uuid-1-2-2', output_type: 'reconciliation_summary', output_data: `{"status": "Success", "message": "All 8,912 rows matched perfectly after correction."}` },
                { agent_run_id: 'run-uuid-2-1-1', output_type: 'pyspark_code', output_data: `df = spark.table("customers")` },
            ]
        };

        // --- STATE MANAGEMENT ---
        let state = {
            selectedSessionId: 'session-uuid-1',
            selectedAgentRunId: 'run-uuid-1-1-1',
        };

        // --- ICONS ---
        const CheckCircleIcon = (cn) => `<svg class="${cn}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>`;
        const XCircleIcon = (cn) => `<svg class="${cn}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" /></svg>`;
        const ClockIcon = (cn) => `<svg class="${cn} animate-spin" style="animation-duration: 3s;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" /></svg>`;
        const SkipIcon = (cn) => `<svg class="${cn}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M5.293 4.293a1 1 0 011.414 0L10 7.586l3.293-3.293a1 1 0 111.414 1.414L11.414 9l3.293 3.293a1 1 0 01-1.414 1.414L10 10.414l-3.293 3.293a1 1 0 01-1.414-1.414L8.586 9 5.293 5.707a1 1 0 010-1.414z" /></svg>`;
        const RetryIcon = (cn) => `<svg class="${cn}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0011.664 0l3.181-3.183m-11.664 0l4.992-4.993m-4.993 0l3.181-3.183a8.25 8.25 0 0111.664 0l3.181 3.183" /></svg>`;
        const ClipboardIcon = (cn) => `<svg class="${cn}" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a2.25 2.25 0 01-2.25 2.25h-1.5a2.25 2.25 0 01-2.25-2.25V3.888c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184" /></svg>`;
        
        // --- COMPONENT TEMPLATES ---
        const StatusIndicator = (status) => {
            const map = { 'Completed': 'bg-green-500', 'Failed': 'bg-red-500', 'In Progress': 'bg-blue-500' };
            return `<div class="w-2.5 h-2.5 rounded-full ${map[status] || 'bg-slate-500'} flex-shrink-0"></div>`;
        };

        const CodeBlock = (language, content, uniqueId) => {
            const sanitizedContent = content.replace(/</g, "&lt;").replace(/>/g, "&gt;");
            return `
                <div class="bg-slate-900 rounded-lg overflow-hidden relative group">
                    <div class="flex justify-between items-center px-4 py-1.5 bg-slate-950">
                        <span class="text-xs font-semibold text-slate-400 uppercase">${language}</span>
                        <button data-copy-id="${uniqueId}" class="copy-button text-slate-400 hover:text-white transition-colors p-1 rounded-md">
                           ${ClipboardIcon('w-4 h-4')}
                        </button>
                    </div>
                    <pre class="p-4 text-sm overflow-x-auto custom-scrollbar"><code id="code-${uniqueId}">${sanitizedContent}</code></pre>
                </div>`;
        };
        
        const DetailCard = ({ title, content }) => `
            <div class="bg-slate-800/50 rounded-lg">
                <h4 class="text-sm font-semibold text-slate-300 px-4 py-2 border-b border-slate-700/50">${title}</h4>
                <div class="p-4">${content}</div>
            </div>
        `;

        // --- RENDER FUNCTIONS ---
        function renderSessionList() {
            const container = document.getElementById('session-list');
            container.innerHTML = db.sessions.map(session => `
                <button data-session-id="${session.session_id}" class="session-button w-full text-left p-3 rounded-lg transition-colors flex items-start space-x-3 ${state.selectedSessionId === session.session_id ? 'bg-slate-700/50' : 'hover:bg-slate-800/60'}">
                    ${StatusIndicator(session.status)}
                    <div class="flex-1 overflow-hidden">
                        <p class="font-semibold text-sm text-white truncate">${session.session_id}</p>
                        <p class="text-xs text-slate-400">${new Date(session.start_time).toLocaleString()}</p>
                    </div>
                </button>
            `).join('');
        }

        function renderFlow() {
            const session = db.sessions.find(s => s.session_id === state.selectedSessionId);
            const iterations = db.iterations.filter(i => i.session_id === state.selectedSessionId).sort((a,b) => a.iteration_number - b.iteration_number);
            const container = document.getElementById('flow-column');
            
            const getStatusClasses = (status) => {
                switch (status) {
                    case 'Completed': return 'border-green-400/50 bg-green-900/30 text-green-300';
                    case 'Failed': return 'border-red-400/50 bg-red-900/30 text-red-300';
                    case 'In Progress': return 'border-blue-400/50 bg-blue-900/30 text-blue-300';
                    default: return 'border-slate-600 bg-slate-800 text-slate-300';
                }
            };
            
            const getIcon = (status) => {
                switch (status) {
                    case 'Completed': return CheckCircleIcon('w-5 h-5');
                    case 'Failed': return XCircleIcon('w-5 h-5');
                    case 'In Progress': return ClockIcon('w-5 h-5');
                    default: return ClockIcon('w-5 h-5');
                }
            };

            container.innerHTML = `
                <div class="p-4 border-b border-slate-800 flex-shrink-0">
                    <h2 class="font-bold text-white text-lg truncate">${session.session_id}</h2>
                    <p class="text-sm text-slate-400">Iterations & Agent Runs</p>
                </div>
                <div class="flex-1 p-4 space-y-4 overflow-y-auto custom-scrollbar">
                    ${iterations.map(iter => `
                        <div class="rounded-lg bg-slate-800/40 p-3">
                            <h3 class="text-sm font-bold text-amber-400 mb-2 flex items-center">
                                Iteration ${iter.iteration_number}
                                ${iter.needs_retry ? `<span class="ml-auto text-xs font-semibold text-amber-300 bg-amber-500/20 px-2 py-0.5 rounded-full">RETRY SUGGESTED</span>` : ''}
                            </h3>
                            <div class="space-y-1">
                                ${db.agent_runs.filter(r => r.iteration_id === iter.iteration_id).map(run => `
                                    <button data-run-id="${run.agent_run_id}" class="agent-run-button w-full p-2 text-left rounded-md flex items-center space-x-3 transition-colors ${state.selectedAgentRunId === run.agent_run_id ? 'bg-slate-700/80' : 'hover:bg-slate-700/40'}">
                                        <div class="flex-shrink-0 ${run.status === 'Failed' ? 'text-red-400' : run.status === 'Completed' ? 'text-green-400' : 'text-blue-400'}">${getIcon(run.status)}</div>
                                        <div class="flex-1 text-sm font-medium text-slate-200">${run.agent_name}</div>
                                    </button>
                                `).join('')}
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        function renderDetails() {
            const run = db.agent_runs.find(r => r.agent_run_id === state.selectedAgentRunId);
            const container = document.getElementById('details-column');

            if (!run) {
                container.innerHTML = `<div class="p-8 text-center text-slate-500 m-auto">Select an agent run to see details.</div>`;
                return;
            }

            const input = db.agent_inputs.find(i => i.agent_run_id === run.agent_run_id);
            const output = db.agent_outputs.find(o => o.agent_run_id === run.agent_run_id);
            const duration = run.start_time && run.end_time ? `${((new Date(run.end_time) - new Date(run.start_time)) / 1000).toFixed(2)}s` : 'N/A';
            
            const renderData = (data, type) => {
                if (!data) return `<p class="text-slate-500 italic">No ${type} data recorded.</p>`;
                if (data.input_type?.includes('sql') || data.output_type?.includes('code')) {
                    return CodeBlock('code', data.input_data || data.output_data, `${type}-${run.agent_run_id}`);
                }
                if (data.output_type?.includes('json') || data.output_data?.startsWith('{')) {
                     try {
                        const jsonData = JSON.parse(data.output_data);
                        return CodeBlock('json', JSON.stringify(jsonData, null, 2), `${type}-${run.agent_run_id}`);
                     } catch(e) {
                        return `<pre class="text-sm text-slate-300 bg-slate-900 p-3 rounded-md whitespace-pre-wrap font-mono custom-scrollbar">${data.input_data || data.output_data}</pre>`;
                     }
                }
                return `<pre class="text-sm text-slate-300 bg-slate-900 p-3 rounded-md whitespace-pre-wrap font-mono custom-scrollbar">${data.input_data || data.output_data}</pre>`;
            };

            container.innerHTML = `
                <div class="p-4 border-b border-slate-800 flex-shrink-0">
                    <h3 class="font-bold text-white text-lg">${run.agent_name}</h3>
                    <p class="text-sm text-slate-400">Agent Run Details</p>
                </div>
                <div class="flex-1 p-4 space-y-4 overflow-y-auto custom-scrollbar">
                    ${DetailCard({ title: 'Status & Timings', content: `
                        <ul class="text-sm space-y-1.5">
                            <li class="flex justify-between"><span>Status:</span> <span class="font-semibold text-white capitalize">${run.status}</span></li>
                            <li class="flex justify-between"><span>Start Time:</span> <span class="font-semibold text-white">${run.start_time ? new Date(run.start_time).toLocaleTimeString() : 'N/A'}</span></li>
                            <li class="flex justify-between"><span>End Time:</span> <span class="font-semibold text-white">${run.end_time ? new Date(run.end_time).toLocaleTimeString() : 'N/A'}</span></li>
                            <li class="flex justify-between"><span>Duration:</span> <span class="font-semibold text-white">${duration}</span></li>
                        </ul>
                    `})}
                    
                    ${input ? DetailCard({ title: `Input: <span class="text-xs uppercase text-slate-400 font-normal">${input.input_type}</span>`, content: renderData(input, 'input') }) : ''}
                    
                    ${output ? DetailCard({ title: `Output: <span class="text-xs uppercase text-slate-400 font-normal">${output.output_type}</span>`, content: renderData(output, 'output') }) : ''}

                    ${run.error_message ? DetailCard({ title: 'Error Message', content: `<pre class="text-sm text-red-300 whitespace-pre-wrap font-mono">${run.error_message}</pre>`}) : ''}
                </div>
            `;
        }

        // --- GLOBAL RENDER & EVENT LISTENERS ---
        function fullRender() {
            renderSessionList();
            renderFlow();
            renderDetails();
            addEventListeners();
        }

        function addEventListeners() {
            document.querySelectorAll('.session-button').forEach(btn => {
                btn.onclick = (e) => {
                    state.selectedSessionId = e.currentTarget.dataset.sessionId;
                    const firstIteration = db.iterations.find(i => i.session_id === state.selectedSessionId);
                    const firstRun = db.agent_runs.find(r => r.iteration_id === firstIteration?.iteration_id);
                    state.selectedAgentRunId = firstRun?.agent_run_id || null;
                    fullRender();
                };
            });

            document.querySelectorAll('.agent-run-button').forEach(btn => {
                btn.onclick = (e) => {
                    state.selectedAgentRunId = e.currentTarget.dataset.runId;
                    renderFlow(); // To update selection style
                    renderDetails();
                    addEventListeners();
                };
            });

            document.querySelectorAll('.copy-button').forEach(button => {
                button.onclick = (e) => {
                    const btn = e.currentTarget;
                    const copyId = btn.dataset.copyId;
                    const [type, runId] = copyId.split('-');
                    const data = type === 'input' 
                        ? db.agent_inputs.find(i => i.agent_run_id === runId).input_data
                        : db.agent_outputs.find(o => o.agent_run_id === runId).output_data;

                    navigator.clipboard.writeText(data).then(() => {
                        btn.innerHTML = CheckCircleIcon('w-4 h-4 text-green-400');
                        setTimeout(() => { btn.innerHTML = ClipboardIcon('w-4 h-4'); }, 2000);
                    });
                };
            });
        }

        // Initial Load
        document.addEventListener('DOMContentLoaded', fullRender);
    </script>
</body>
</html>

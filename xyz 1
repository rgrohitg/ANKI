import React, { useState, useEffect, useMemo } from 'react';

// --- ICONS (as React Components) ---
const CheckCircleIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" /></svg>;
const XCircleIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" /></svg>;
const ClockIcon = ({ className }) => <svg className={`${className}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" /></svg>;
const ListBulletIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clipRule="evenodd" /></svg>;
const ShareIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" /></svg>;
const ClipboardIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a2.25 2.25 0 01-2.25 2.25h-1.5a2.25 2.25 0 01-2.25-2.25V3.888c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184" /></svg>;
const ChevronDownIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" /></svg>;
const SearchIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" /></svg>;

// --- MOCK API SERVICE ---
const api = {
    getSessions: () => new Promise(resolve => setTimeout(() => resolve([
        { session_id: 'session-uuid-1', start_time: '2025-07-22T21:00:00Z', status: 'Completed', created_by: 'user_a' }, 
        { session_id: 'session-uuid-2', start_time: '2025-07-22T21:15:00Z', status: 'In Progress', created_by: 'user_b' },
        { session_id: 'session-uuid-3', start_time: '2025-07-22T20:30:00Z', status: 'Failed', created_by: 'user_c' },
        { session_id: 'session-uuid-4', start_time: '2025-07-22T19:00:00Z', status: 'Completed', created_by: 'user_a' },
    ]), 500)),
    getSessionDetails: (sessionId) => new Promise(resolve => setTimeout(() => {
        const sessions = {
            'session-uuid-1': { session_id: 'session-uuid-1', start_time: '2025-07-22T21:00:00Z', end_time: '2025-07-22T21:03:30Z', status: 'Completed', created_by: 'user_a', max_iterations: 3, final_result: 'Success', iterations: [{ iteration_id: 'iter-uuid-1-1', iteration_number: 1, needs_retry: true, reason: 'Reconciliation failed due to function incompatibility.', agent_runs: [{ agent_run_id: 'run-uuid-1-1-1', agent_name: 'SQL to PySpark Converter', status: 'Completed', start_time: '2025-07-22T21:00:05Z', end_time: '2025-07-22T21:00:30Z', error_message: null, input: { input_type: 'sql_query', input_data: "SELECT order_id, DATEADD(day, 5, order_date) as promised_date FROM orders;" }, output: { output_type: 'pyspark_code', output_data: `df = spark.table("orders").withColumn("promised_date", F.expr("DATEADD(day, 5, order_date)"))` } }, { agent_run_id: 'run-uuid-1-1-2', agent_name: 'Reconciliation Agent', status: 'Failed', start_time: '2025-07-22T21:00:35Z', end_time: '2025-07-22T21:01:00Z', error_message: "PySpark execution failed. AnalysisException: Undefined function: 'DATEADD'.", input: { input_type: 'comparison_config', input_data: "{'source': 'sql_server', 'target': 'databricks'}" }, output: { output_type: 'error_log', output_data: "PySpark execution failed. AnalysisException: Undefined function: 'DATEADD'." } }, { agent_run_id: 'run-uuid-1-1-3', agent_name: 'Analyzer Agent', status: 'Completed', start_time: '2025-07-22T21:01:05Z', end_time: '2025-07-22T21:01:20Z', error_message: null, input: { input_type: 'error_report', input_data: "Reconciliation failed with error: Undefined function: 'DATEADD'" }, output: { output_type: 'analysis_result', output_data: `{"needs_retry": true, "suggestion": "The SQL function 'DATEADD' is not directly compatible with PySpark's 'expr'. The correct PySpark function is 'date_add'. Modify the prompt to handle this translation."}` } }] }, { iteration_id: 'iter-uuid-1-2', iteration_number: 2, needs_retry: false, reason: null, agent_runs: [{ agent_run_id: 'run-uuid-1-2-1', agent_name: 'SQL to PySpark Converter', status: 'Completed', start_time: '2025-07-22T21:01:25Z', end_time: '2025-07-22T21:01:50Z', error_message: null, input: { input_type: 'sql_query_with_suggestion', input_data: "Original SQL: SELECT order_id, DATEADD(day, 5, order_date) as promised_date FROM orders;\nAnalyzer Suggestion: Translate DATEADD to date_add." }, output: { output_type: 'pyspark_code', output_data: `from pyspark.sql import functions as F\ndf = spark.table("orders").withColumn("promised_date", F.date_add(F.col("order_date"), 5))` } }, { agent_run_id: 'run-uuid-1-2-2', agent_name: 'Reconciliation Agent', status: 'Completed', start_time: '2025-07-22T21:01:55Z', end_time: '2025-07-22T21:03:30Z', error_message: null, input: { input_type: 'comparison_config', input_data: "{'source': 'sql_server', 'target': 'databricks'}" }, output: { output_type: 'reconciliation_summary', output_data: `{"status": "Success", "message": "All 8,912 rows matched perfectly after correction."}` } }] }] },
            'session-uuid-2': { session_id: 'session-uuid-2', start_time: '2025-07-22T21:15:00Z', end_time: null, status: 'In Progress', created_by: 'user_b', max_iterations: 3, final_result: null, iterations: [{ iteration_id: 'iter-uuid-2-1', iteration_number: 1, needs_retry: false, reason: null, agent_runs: [{ agent_run_id: 'run-uuid-2-1-1', agent_name: 'SQL to PySpark Converter', status: 'Completed', start_time: '2025-07-22T21:15:05Z', end_time: '2025-07-22T21:15:45Z', error_message: null, input: { input_type: 'sql_query', input_data: "SELECT * FROM customers;" }, output: { output_type: 'pyspark_code', output_data: `df = spark.table("customers")` } }, { agent_run_id: 'run-uuid-2-1-2', agent_name: 'Reconciliation Agent', status: 'In Progress', start_time: '2025-07-22T21:15:50Z', end_time: null, error_message: null, input: { input_type: 'comparison_config', input_data: "{'source': 'sql_server', 'target': 'databricks'}" }, output: null }] }] },
            'session-uuid-3': { session_id: 'session-uuid-3', start_time: '2025-07-22T20:30:00Z', end_time: '2025-07-22T20:31:00Z', status: 'Failed', created_by: 'user_c', max_iterations: 3, final_result: 'Failure', iterations: [{ iteration_id: 'iter-uuid-3-1', iteration_number: 1, needs_retry: false, reason: 'Source table not found.', agent_runs: [{ agent_run_id: 'run-uuid-3-1-1', agent_name: 'SQL to PySpark Converter', status: 'Failed', start_time: '2025-07-22T20:30:05Z', end_time: '2025-07-22T20:30:10Z', error_message: 'Table `non_existent_table` not found in source database.', input: { input_type: 'sql_query', input_data: "SELECT * FROM non_existent_table;" }, output: null }] }] },
            'session-uuid-4': { session_id: 'session-uuid-4', start_time: '2025-07-22T19:00:00Z', end_time: '2025-07-22T19:02:00Z', status: 'Completed', created_by: 'user_a', max_iterations: 3, final_result: 'Success', iterations: [{ iteration_id: 'iter-uuid-4-1', iteration_number: 1, needs_retry: false, reason: null, agent_runs: [{ agent_run_id: 'run-uuid-4-1-1', agent_name: 'SQL to PySpark Converter', status: 'Completed', start_time: '2025-07-22T19:00:05Z', end_time: '2025-07-22T19:00:45Z', error_message: null, input: { input_type: 'sql_query', input_data: "SELECT * FROM products;" }, output: { output_type: 'pyspark_code', output_data: `df = spark.table("products")` } }, { agent_run_id: 'run-uuid-4-1-2', agent_name: 'Reconciliation Agent', status: 'Completed', start_time: '2025-07-22T19:00:50Z', end_time: '2025-07-22T19:02:00Z', error_message: null, input: { input_type: 'comparison_config', input_data: "{'source': 'sql_server', 'target': 'databricks'}" }, output: { output_type: 'reconciliation_summary', output_data: `{"status": "Success", "message": "All 10,000 rows matched."}` } }] }] },
        };
        resolve(sessions[sessionId]);
    }, 800)),
};

// --- UTILITY FUNCTIONS ---
const timeAgo = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const seconds = Math.round((now - date) / 1000);
    const minutes = Math.round(seconds / 60);
    const hours = Math.round(minutes / 60);
    const days = Math.round(hours / 24);

    if (seconds < 60) return `${seconds}s ago`;
    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    return `${days}d ago`;
};

// --- REUSABLE UI COMPONENTS ---
const Spinner = ({ className }) => <div className={`animate-spin rounded-full border-2 border-slate-500 border-t-slate-200 ${className}`}></div>;

const StatusIndicator = ({ status }) => {
    const map = { 'Completed': 'bg-green-500', 'Failed': 'bg-red-500', 'In Progress': 'bg-blue-500' };
    return <div className={`w-2 h-2 rounded-full ${map[status] || 'bg-slate-500'} flex-shrink-0`}></div>;
};

const CodeBlock = ({ language, content }) => {
    const [copied, setCopied] = useState(false);
    const handleCopy = () => {
        navigator.clipboard.writeText(content).then(() => {
            setCopied(true);
            setTimeout(() => setCopied(false), 2000);
        });
    };
    return (
        <div className="bg-slate-900 rounded-lg overflow-hidden relative group">
            <div className="flex justify-between items-center px-4 py-1.5 bg-slate-950">
                <span className="text-xs font-semibold text-slate-400 uppercase">{language}</span>
                <button onClick={handleCopy} className="text-slate-400 hover:text-white transition-colors p-1 rounded-md">
                    {copied ? <CheckCircleIcon className="w-4 h-4 text-green-400" /> : <ClipboardIcon className="w-4 h-4" />}
                </button>
            </div>
            <pre className="p-4 text-sm overflow-x-auto custom-scrollbar"><code>{content}</code></pre>
        </div>
    );
};

const AccordionCard = ({ title, children, defaultOpen = false }) => {
    const [isOpen, setIsOpen] = useState(defaultOpen);
    return (
        <div className="bg-slate-800/50 rounded-lg overflow-hidden">
            <button onClick={() => setIsOpen(!isOpen)} className="w-full flex justify-between items-center text-left text-sm font-semibold text-slate-300 px-4 py-3 border-b border-slate-700/50 hover:bg-slate-700/20 transition-colors">
                <h4 dangerouslySetInnerHTML={{ __html: title }} />
                <ChevronDownIcon className={`w-5 h-5 text-slate-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
            </button>
            {isOpen && <div className="p-4 animate-fade-in">{children}</div>}
        </div>
    );
};

// --- COLUMN COMPONENTS ---
const SessionList = ({ sessions, selectedSessionId, onSelectSession, searchQuery, onSearchQueryChange, statusFilter, onStatusFilterChange }) => {
    const filterOptions = ['All', 'Completed', 'In Progress', 'Failed'];
    return (
        <aside className="w-full max-w-[320px] bg-slate-950 border-r border-slate-800 flex flex-col h-full">
            <div className="p-4 border-b border-slate-800 flex-shrink-0">
                <h1 className="text-xl font-bold text-white">Agent Command Center</h1>
                <p className="text-sm text-slate-400">Execution Monitor</p>
            </div>
            <div className="p-3 border-b border-slate-800">
                <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <SearchIcon className="w-4 h-4 text-slate-400" />
                    </div>
                    <input 
                        type="text"
                        placeholder="Search sessions..."
                        value={searchQuery}
                        onChange={(e) => onSearchQueryChange(e.target.value)}
                        className="w-full bg-slate-800 border border-slate-700 rounded-md py-2 pl-9 pr-3 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none"
                    />
                </div>
                <div className="flex items-center space-x-2 mt-3">
                    {filterOptions.map(option => (
                        <button 
                            key={option}
                            onClick={() => onStatusFilterChange(option)}
                            className={`px-2.5 py-1 text-xs font-semibold rounded-full transition-colors ${statusFilter === option ? 'bg-amber-500 text-slate-900' : 'bg-slate-700 hover:bg-slate-600 text-slate-300'}`}
                        >
                            {option}
                        </button>
                    ))}
                </div>
            </div>
            <nav className="flex-1 p-2 space-y-1 overflow-y-auto custom-scrollbar">
                {sessions.length > 0 ? sessions.map(session => (
                    <button key={session.session_id} onClick={() => onSelectSession(session.session_id)} className={`w-full text-left p-3 rounded-lg transition-colors flex items-start space-x-3 ${selectedSessionId === session.session_id ? 'bg-slate-700/50' : 'hover:bg-slate-800/60'}`}>
                        <StatusIndicator status={session.status} />
                        <div className="flex-1 overflow-hidden">
                            <p className="font-semibold text-sm text-white truncate" title={session.session_id}>{session.session_id}</p>
                            <p className="text-xs text-slate-400">by {session.created_by} • {timeAgo(session.start_time)}</p>
                        </div>
                    </button>
                )) : (
                    <div className="text-center py-10 text-slate-500">
                        <p className="font-semibold">No Sessions Found</p>
                        <p className="text-sm">Try adjusting your search or filters.</p>
                    </div>
                )}
            </nav>
        </aside>
    );
};

const FlowView = ({ sessionDetails, selectedAgentRunId, onSelectAgentRun }) => {
    const [viewMode, setViewMode] = useState('list');
    
    const getIcon = (status) => {
        const iconClass = "w-5 h-5";
        switch (status) {
            case 'Completed': return <CheckCircleIcon className={iconClass} />;
            case 'Failed': return <XCircleIcon className={iconClass} />;
            case 'In Progress': return <ClockIcon className={`${iconClass} animate-spin`} />;
            default: return <ClockIcon className={iconClass} />;
        }
    };

    const ListView = () => (
        <div className="flex-1 p-4 space-y-4 overflow-y-auto custom-scrollbar">
            {sessionDetails.iterations.map(iter => (
                <div key={iter.iteration_id} className="rounded-lg bg-slate-800/40 p-3">
                    <h3 className="text-sm font-bold text-amber-400 mb-2 flex items-center">
                        Iteration {iter.iteration_number}
                        {iter.needs_retry && <span className="ml-auto text-xs font-semibold text-amber-300 bg-amber-500/20 px-2 py-0.5 rounded-full">RETRY SUGGESTED</span>}
                    </h3>
                    <div className="space-y-1">
                        {iter.agent_runs.map(run => (
                            <button key={run.agent_run_id} onClick={() => onSelectAgentRun(run.agent_run_id)} className={`w-full p-2 text-left rounded-md flex items-center space-x-3 transition-colors ${selectedAgentRunId === run.agent_run_id ? 'bg-slate-700/80' : 'hover:bg-slate-700/40'}`}>
                                <div className={`flex-shrink-0 ${run.status === 'Failed' ? 'text-red-400' : run.status === 'Completed' ? 'text-green-400' : 'text-blue-400'}`}>{getIcon(run.status)}</div>
                                <div className="flex-1 text-sm font-medium text-slate-200">{run.agent_name}</div>
                            </button>
                        ))}
                    </div>
                </div>
            ))}
        </div>
    );

    const DiagramView = () => (
        <div className="flex-1 p-8 space-y-16 overflow-y-auto custom-scrollbar">
            {sessionDetails.iterations.map((iter, iterIndex) => (
                <div key={iter.iteration_id} className="relative">
                    <div className="flex items-center space-x-3 mb-6">
                        <div className="w-8 h-8 rounded-full bg-amber-500/20 text-amber-300 flex items-center justify-center font-bold text-sm flex-shrink-0">{iter.iteration_number}</div>
                        <h3 className="font-bold text-amber-400">Iteration {iter.iteration_number}</h3>
                    </div>
                    <div className="flex items-center">
                        {iter.agent_runs.map((run, runIndex) => (
                            <React.Fragment key={run.agent_run_id}>
                                {runIndex > 0 && <div className="w-12 h-0.5 bg-slate-600 flex-shrink-0"></div>}
                                <button onClick={() => onSelectAgentRun(run.agent_run_id)} className={`flex-shrink-0 w-36 h-24 p-3 rounded-lg border-2 flex flex-col justify-center items-center text-center transition-all duration-300 ${selectedAgentRunId === run.agent_run_id ? 'bg-slate-700 border-amber-400 scale-105 shadow-lg shadow-amber-500/10' : 'bg-slate-800/50 border-slate-700 hover:border-slate-600 hover:bg-slate-800'}`}>
                                    <div className={`mb-1.5 ${run.status === 'Failed' ? 'text-red-400' : run.status === 'Completed' ? 'text-green-400' : 'text-blue-400'}`}>{getIcon(run.status)}</div>
                                    <p className="text-xs font-semibold text-slate-200 leading-tight">{run.agent_name}</p>
                                </button>
                            </React.Fragment>
                        ))}
                    </div>
                    {iter.needs_retry && iterIndex < sessionDetails.iterations.length - 1 && (
                        <svg className="absolute w-full h-16" style={{ top: '100%', left: '0', marginTop: '-0.5rem' }}>
                            <path d="M 144 0 V 20 C 144 30, 134 30, 124 30 H 60 C 50 30, 50 40, 50 50 V 64" stroke="#f59e0b" strokeWidth="2" fill="none" strokeDasharray="4 4" className="animate-flow" />
                            <path d="M 50 70 L 46 62 L 54 62 Z" fill="#f59e0b" />
                            <text x="75" y="48" fill="#fcd34d" fontSize="10" fontWeight="bold" textAnchor="middle">RETRY</text>
                        </svg>
                    )}
                </div>
            ))}
        </div>
    );
    
    if (!sessionDetails) return <section className="flex-1 flex flex-col h-full border-r border-slate-800 min-w-[400px]"></section>;

    return (
        <section className="flex-1 flex flex-col h-full border-r border-slate-800 min-w-[400px]">
            <div className="p-4 border-b border-slate-800 flex-shrink-0 flex justify-between items-center">
                <div>
                    <h2 className="font-bold text-white text-lg truncate">{sessionDetails.session_id}</h2>
                    <p className="text-sm text-slate-400">Execution Details</p>
                </div>
                <div className="flex items-center bg-slate-800/80 p-1 rounded-lg">
                    <button onClick={() => setViewMode('list')} className={`px-2 py-1 text-xs font-semibold rounded-md flex items-center transition-colors ${viewMode === 'list' ? 'bg-amber-500/80 text-white' : 'text-slate-300 hover:bg-slate-700/50'}`}>
                        <ListBulletIcon className="w-4 h-4 mr-1.5" /> List
                    </button>
                    <button onClick={() => setViewMode('flow')} className={`px-2 py-1 text-xs font-semibold rounded-md flex items-center transition-colors ${viewMode === 'flow' ? 'bg-amber-500/80 text-white' : 'text-slate-300 hover:bg-slate-700/50'}`}>
                        <ShareIcon className="w-4 h-4 mr-1.5" /> Flow
                    </button>
                </div>
            </div>
            {viewMode === 'list' ? <ListView /> : <DiagramView />}
        </section>
    );
};

const DetailView = ({ sessionDetails, selectedAgentRunId }) => {
    const run = useMemo(() => {
        if (!sessionDetails || !selectedAgentRunId) return null;
        for (const iter of sessionDetails.iterations) {
            const foundRun = iter.agent_runs.find(r => r.agent_run_id === selectedAgentRunId);
            if (foundRun) return foundRun;
        }
        return null;
    }, [sessionDetails, selectedAgentRunId]);

    if (!run) {
        return (
            <section className="w-full max-w-md lg:max-w-lg xl:max-w-2xl bg-slate-950/50 flex flex-col h-full">
                <div className="p-8 text-center text-slate-500 m-auto">Select an agent run to see details.</div>
            </section>
        );
    }

    const duration = run.start_time && run.end_time ? `${((new Date(run.end_time) - new Date(run.start_time)) / 1000).toFixed(2)}s` : 'N/A';
    const renderData = (data, type) => {
        if (!data) return <p className="text-slate-500 italic">No {type} data recorded.</p>;
        const content = data.input_data || data.output_data;
        const language = data.input_type || data.output_type;
        if (language?.includes('sql') || language?.includes('code')) return <CodeBlock language="code" content={content} />;
        if (language?.includes('json') || content?.startsWith('{')) {
            try {
                const jsonData = JSON.parse(content);
                return <CodeBlock language="json" content={JSON.stringify(jsonData, null, 2)} />;
            } catch (e) {
                return <pre className="text-sm text-slate-300 bg-slate-900 p-3 rounded-md whitespace-pre-wrap font-mono custom-scrollbar">{content}</pre>;
            }
        }
        return <pre className="text-sm text-slate-300 bg-slate-900 p-3 rounded-md whitespace-pre-wrap font-mono custom-scrollbar">{content}</pre>;
    };

    return (
        <section className="w-full max-w-md lg:max-w-lg xl:max-w-2xl bg-slate-950/50 flex flex-col h-full">
            <div className="p-4 border-b border-slate-800 flex-shrink-0">
                <h3 className="font-bold text-white text-lg">{run.agent_name}</h3>
                <p className="text-sm text-slate-400">Agent Run Details</p>
            </div>
            <div className="flex-1 p-4 space-y-3 overflow-y-auto custom-scrollbar">
                <AccordionCard title="Status & Timings" defaultOpen={true}>
                    <ul className="text-sm space-y-1.5">
                        <li className="flex justify-between"><span>Status:</span> <span className="font-semibold text-white capitalize">{run.status}</span></li>
                        <li className="flex justify-between"><span>Start Time:</span> <span className="font-semibold text-white">{run.start_time ? new Date(run.start_time).toLocaleTimeString() : 'N/A'}</span></li>
                        <li className="flex justify-between"><span>End Time:</span> <span className="font-semibold text-white">{run.end_time ? new Date(run.end_time).toLocaleTimeString() : 'N/A'}</span></li>
                        <li className="flex justify-between"><span>Duration:</span> <span className="font-semibold text-white">{duration}</span></li>
                    </ul>
                </AccordionCard>
                {run.input && <AccordionCard title={`Input: <span class="text-xs uppercase text-slate-400 font-normal">${run.input.input_type}</span>`} defaultOpen={true}>{renderData(run.input, 'input')}</AccordionCard>}
                {run.output && <AccordionCard title={`Output: <span class="text-xs uppercase text-slate-400 font-normal">${run.output.output_type}</span>`} defaultOpen={true}>{renderData(run.output, 'output')}</AccordionCard>}
                {run.error_message && <AccordionCard title="Error Message" defaultOpen={true}><pre className="text-sm text-red-300 whitespace-pre-wrap font-mono">{run.error_message}</pre></AccordionCard>}
            </div>
        </section>
    );
};


// --- MAIN APP COMPONENT ---
export default function App() {
    const [allSessions, setAllSessions] = useState([]);
    const [selectedSessionId, setSelectedSessionId] = useState(null);
    const [sessionDetails, setSessionDetails] = useState(null);
    const [selectedAgentRunId, setSelectedAgentRunId] = useState(null);
    const [loadingSessionList, setLoadingSessionList] = useState(true);
    const [loadingSessionDetails, setLoadingSessionDetails] = useState(false);
    const [searchQuery, setSearchQuery] = useState("");
    const [statusFilter, setStatusFilter] = useState("All");

    useEffect(() => {
        api.getSessions().then(data => {
            setAllSessions(data);
            if (data.length > 0) {
                setSelectedSessionId(data[0].session_id);
            }
            setLoadingSessionList(false);
        });
    }, []);

    useEffect(() => {
        if (selectedSessionId) {
            setLoadingSessionDetails(true);
            api.getSessionDetails(selectedSessionId).then(data => {
                setSessionDetails(data);
                if (data && data.iterations.length > 0 && data.iterations[0].agent_runs.length > 0) {
                   setSelectedAgentRunId(data.iterations[0].agent_runs[0].agent_run_id);
                } else {
                   setSelectedAgentRunId(null);
                }
                setLoadingSessionDetails(false);
            });
        }
    }, [selectedSessionId]);

    const filteredSessions = useMemo(() => {
        return allSessions
            .filter(session => {
                if (statusFilter === 'All') return true;
                return session.status === statusFilter;
            })
            .filter(session => {
                const query = searchQuery.toLowerCase();
                return session.session_id.toLowerCase().includes(query) || session.created_by.toLowerCase().includes(query);
            });
    }, [allSessions, searchQuery, statusFilter]);

    if (loadingSessionList) {
        return (
            <div className="w-full h-full flex flex-col items-center justify-center bg-slate-950 text-slate-400">
                <Spinner className="w-8 h-8" />
                <p className="mt-4 text-lg font-semibold">Initializing Command Center...</p>
            </div>
        )
    }

    return (
        <div className="text-slate-300 flex h-screen w-full overflow-hidden bg-slate-950">
            <SessionList 
                sessions={filteredSessions} 
                selectedSessionId={selectedSessionId} 
                onSelectSession={setSelectedSessionId}
                searchQuery={searchQuery}
                onSearchQueryChange={setSearchQuery}
                statusFilter={statusFilter}
                onStatusFilterChange={setStatusFilter}
            />
            {loadingSessionDetails ? 
                <div className="flex-1 flex items-center justify-center text-slate-500 border-r border-slate-800"><Spinner className="w-6 h-6" /></div> :
                <FlowView sessionDetails={sessionDetails} selectedAgentRunId={selectedAgentRunId} onSelectAgentRun={setSelectedAgentRunId} />
            }
            {loadingSessionDetails ? 
                <div className="w-full max-w-md lg:max-w-lg xl:max-w-2xl flex items-center justify-center text-slate-500"><Spinner className="w-6 h-6" /></div> :
                <DetailView sessionDetails={sessionDetails} selectedAgentRunId={selectedAgentRunId} />
            }
        </div>
    );
}

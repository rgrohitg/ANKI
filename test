import React, { useState, useEffect, useMemo } from 'react';

// --- ICONS (as React Components) ---
const CheckCircleIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" /></svg>;
const XCircleIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" /></svg>;
const ClockIcon = ({ className }) => <svg className={`${className}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" /></svg>;
const SkipIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" /></svg>;
const ListBulletIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clipRule="evenodd" /></svg>;
const ShareIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" /></svg>;
const ClipboardIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a2.25 2.25 0 01-2.25 2.25h-1.5a2.25 2.25 0 01-2.25-2.25V3.888c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184" /></svg>;
const ChevronDownIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" /></svg>;
const SearchIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" /></svg>;
const PanelLeftCloseIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5" /></svg>;
const PanelLeftOpenIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5" /></svg>;
const XMarkIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>;
const PlusIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" /></svg>;
const UploadIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5" /></svg>;
const Bars3Icon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" /></svg>;
const CodeBracketSquareIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M14.25 9.75L16.5 12l-2.25 2.25m-4.5 0L7.5 12l2.25-2.25M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z" /></svg>;
const CloudArrowUpIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M12 16.5V9.75m0 0l-3.75 3.75M12 9.75l3.75 3.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
const ScaleIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0012 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52l2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 01-2.153.24c-1.118 0-2.231-.3-3.223-.865a5.988 5.988 0 01-2.153-.24c-.482-.174-.71- .703-.589-1.202L18.75 4.971zm-16.5.52c.99-.203 1.99-.377 3-.52m0 0l2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 01-2.153.24c-1.118 0-2.231-.3-3.223-.865a5.988 5.988 0 01-2.153-.24c-.482-.174-.71- .703-.589-1.202L5.25 4.971z" /></svg>;
const LightBulbIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3.75 7.478a12.06 12.06 0 01-4.5 0m3.75 2.311a7.5 7.5 0 01-7.5 0c-1.42 0-2.798-.31-4.09-1.003a.75.75 0 111.08-1.04m11.52 0a.75.75 0 11-1.08 1.04m-1.08-1.04a7.5 7.5 0 00-7.5 0m7.5 0a7.5 7.5 0 00-7.5 0m7.5 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m0 0a6.01 6.01 0 011.5.189m-1.5-.189a6.01 6.01 0 00-1.5.189m7.5 7.478a12.06 12.06 0 01-4.5 0m3.75 2.311a7.5 7.5 0 01-7.5 0c-1.42 0-2.798-.31-4.09-1.003a.75.75 0 111.08-1.04m11.52 0a.75.75 0 11-1.08 1.04m-1.08-1.04a7.5 7.5 0 00-7.5 0m7.5 0a7.5 7.5 0 00-7.5 0m7.5 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m0 0a6.01 6.01 0 011.5.189m-1.5-.189a6.01 6.01 0 00-1.5.189" /></svg>;
const HandThumbUpIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M1 8.25a1.25 1.25 0 112.5 0v7.5a1.25 1.25 0 11-2.5 0v-7.5zM11 3V1.7c0-.268.14-.526.395-.607A2 2 0 0114 3c0 .995-.182 1.948-.514 2.826-.224.593-.143 1.29.213 1.794l.24.343a1.75 1.75 0 01.282 1.95l-1.428 4.284a1.75 1.75 0 01-3.228 0l-1.428-4.284a1.75 1.75 0 01.282-1.95l.24-.343c.356-.504.437-1.2.213-1.794A15.13 15.13 0 0011 3z" /></svg>;
const HandThumbDownIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path d="M1 11.75a1.25 1.25 0 102.5 0v-7.5a1.25 1.25 0 10-2.5 0v7.5zM11 17v1.3c0 .268.14.526.395.607A2 2 0 0014 17c0-.995-.182-1.948-.514-2.826-.224-.593-.143-1.29.213-1.794l.24-.343a1.75 1.75 0 00.282-1.95l-1.428-4.284a1.75 1.75 0 00-3.228 0l-1.428 4.284a1.75 1.75 0 00.282 1.95l.24.343c.356-.504.437-1.2.213-1.794A15.13 15.13 0 0111 17z" /></svg>;
const SparklesIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.562L16.25 21.75l-.648-1.188a2.25 2.25 0 01-1.4-1.4l-1.188-.648 1.188-.648a2.25 2.25 0 011.4-1.4l.648-1.188.648 1.188a2.25 2.25 0 011.4 1.4l1.188.648-1.188.648a2.25 2.25 0 01-1.4 1.4z" /></svg>;
const Cog6ToothIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.438.995s.145.755.438.995l1.003.827c.48.398.668 1.03.26 1.431l-1.296 2.247a1.125 1.125 0 01-1.37.49l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.063-.374-.313-.686-.645-.87a6.52 6.52 0 01-.22-.127c-.324-.196-.72-.257-1.075-.124l-1.217.456a1.125 1.125 0 01-1.37-.49l-1.296-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.437-.995s-.145-.755-.437-.995l-1.004-.827a1.125 1.125 0 01-.26-1.431l1.296-2.247a1.125 1.125 0 011.37-.49l1.217.456c.355.133.75.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.213-1.28z" /><path strokeLinecap="round" strokeLinejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>;


// --- MOCK API SERVICE ---
const api = {
    getSessions: () => new Promise(resolve => setTimeout(() => {
        const now = new Date();
        const sessions = [
            { session_id: 'sess_a4b1c2d3', start_time: new Date(now.getTime() - 30 * 60000).toISOString(), status: 'Completed', created_by: 'user_a' }, 
            { session_id: 'sess_e5f6g7h8', start_time: new Date(now.getTime() - 5 * 60000).toISOString(), status: 'In Progress', created_by: 'user_b' },
            { session_id: 'sess_i9j0k1l2', start_time: new Date(now.getTime() - 2 * 3600 * 1000).toISOString(), status: 'Failed', created_by: 'user_c' },
            { session_id: 'sess_m3n4o5p6', start_time: new Date(now.getTime() - 25 * 3600 * 1000).toISOString(), status: 'Completed', created_by: 'user_a' },
            { session_id: 'sess_q7r8s9t0', start_time: new Date(now.getTime() - 5 * 24 * 3600 * 1000).toISOString(), status: 'Completed', created_by: 'user_d' },
            { session_id: 'sess_u1v2w3x4', start_time: new Date(now.getTime() - 8 * 24 * 3600 * 1000).toISOString(), status: 'Failed', created_by: 'user_b' },
        ];
        resolve(sessions);
    }, 500)),
    getSessionDetails: (sessionId) => new Promise(resolve => setTimeout(() => {
        const details = {
            'sess_a4b1c2d3': {
                session_id: 'sess_a4b1c2d3', status: 'Completed', created_by: 'user_a',
                iterations: [
                    { iteration_id: 'iter-1-1', iteration_number: 1, needs_retry: true, agent_runs: [
                        { agent_run_id: 'run-1-1-1', agent_name: 'Converter Agent', status: 'Completed', input: {input_data: 'SELECT * FROM orders'}, output: {output_data: 'df = spark.table("orders")'} },
                        { agent_run_id: 'run-1-1-2', agent_name: 'Deployer Agent', status: 'Failed', error_message: 'Databricks cluster unavailable.', input: {input_data: 'Deploy to cluster "prod-main"'}, output: null },
                        { agent_run_id: 'run-1-1-3', agent_name: 'Recon Agent', status: 'Skipped', input: null, output: null },
                        { agent_run_id: 'run-1-1-4', agent_name: 'Analyzer Agent', status: 'Completed', input: {input_data: 'Analyze deployment failure'}, output: {output_data: 'Suggest retry on backup cluster.'} },
                    ]},
                    { iteration_id: 'iter-1-2', iteration_number: 2, needs_retry: false, agent_runs: [
                        { agent_run_id: 'run-1-2-1', agent_name: 'Converter Agent', status: 'Completed', input: {input_data: 'SELECT * FROM orders'}, output: {output_data: 'df = spark.table("orders")'} },
                        { agent_run_id: 'run-1-2-2', agent_name: 'Deployer Agent', status: 'Completed', input: {input_data: 'Deploy to cluster "prod-backup"'}, output: {output_data: 'Deployment successful.'} },
                        { agent_run_id: 'run-1-2-3', agent_name: 'Recon Agent', status: 'Completed', input: {input_data: 'Compare results'}, output: {output_data: 'Reconciliation successful.'} },
                        { agent_run_id: 'run-1-2-4', agent_name: 'Analyzer Agent', status: 'Skipped', input: null, output: null },
                    ]}
                ]
            },
            'sess_e5f6g7h8': {
                 session_id: 'sess_e5f6g7h8', status: 'In Progress', created_by: 'user_b',
                 iterations: [{ iteration_id: 'iter-2-1', iteration_number: 1, needs_retry: false, agent_runs: [
                    { agent_run_id: 'run-2-1-1', agent_name: 'Converter Agent', status: 'Completed', input: {input_data: 'SELECT * FROM customers'}, output: {output_data: 'df = spark.table("customers")'} },
                    { agent_run_id: 'run-2-1-2', agent_name: 'Deployer Agent', status: 'In Progress', input: {input_data: 'Deploy to dev cluster'}, output: null },
                    { agent_run_id: 'run-2-1-3', agent_name: 'Recon Agent', status: 'Pending', input: null, output: null },
                    { agent_run_id: 'run-2-1-4', agent_name: 'Analyzer Agent', status: 'Pending', input: null, output: null },
                 ]}]
            }
        };
        resolve(details[sessionId] || details['sess_a4b1c2d3']);
    }, 300)),
    getAgentPrompts: () => new Promise(resolve => setTimeout(() => {
        resolve([
            { id: 'converter', name: 'Converter Agent', description: 'Converts SQL queries to PySpark code.', prompt: 'You are an expert SQL to PySpark converter. Your task is to accurately translate the given SQL query into efficient and correct PySpark code. Ensure all functions and syntax are compatible with Databricks runtime.' },
            { id: 'deployer', name: 'Deployer Agent', description: 'Deploys and runs code on a cluster.', prompt: 'You are a deployment agent. Your task is to take the provided PySpark code, connect to the specified Databricks cluster, and execute the job. Report success or failure with logs.' },
            { id: 'recon', name: 'Recon Agent', description: 'Compares data between source and target.', prompt: 'You are a data reconciliation agent. Your task is to execute queries against both the source SQL database and the target Databricks table. Compare the results for row count and schema. Report any discrepancies found.' },
            { id: 'analyzer', name: 'Analyzer Agent', description: 'Analyzes failures and suggests fixes.', prompt: 'You are an expert AI software engineer. Your task is to analyze the error logs from a failed agent run. Identify the root cause of the failure and provide a clear, actionable suggestion to fix the problem. If a retry is feasible, state it clearly.' },
        ]);
    }, 400)),
    updateAgentPrompt: (agentId, newPrompt) => new Promise(resolve => setTimeout(() => {
        console.log(`(Mock API) Updating prompt for ${agentId} to: "${newPrompt}"`);
        resolve({ success: true, agentId, newPrompt });
    }, 600)),
};

// --- UTILITY FUNCTIONS ---
const timeAgo = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const seconds = Math.round((now - date) / 1000);
    if (seconds < 60) return `${seconds}s ago`;
    const minutes = Math.round(seconds / 60);
    if (minutes < 60) return `${minutes}m ago`;
    const hours = Math.round(minutes / 60);
    if (hours < 24) return `${hours}h ago`;
    return `${Math.round(hours / 24)}d ago`;
};

// --- REUSABLE UI COMPONENTS ---
const Spinner = ({ className }) => <div className={`animate-spin rounded-full border-2 border-slate-500 border-t-slate-200 ${className}`}></div>;

const StatusIndicator = ({ status }) => {
    const map = { 'Completed': 'bg-green-500', 'Failed': 'bg-red-500', 'In Progress': 'bg-blue-500' };
    return <div className={`w-2 h-2 rounded-full ${map[status] || 'bg-slate-500'} flex-shrink-0`}></div>;
};

const CodeBlock = ({ language, content }) => {
    const [copied, setCopied] = useState(false);
    const handleCopy = () => {
        navigator.clipboard.writeText(content).then(() => {
            setCopied(true);
            setTimeout(() => setCopied(false), 2000);
        });
    };
    return (
        <div className="bg-slate-900 rounded-lg overflow-hidden relative group">
            <div className="flex justify-between items-center px-4 py-1.5 bg-slate-950">
                <span className="text-xs font-semibold text-slate-400 uppercase">{language}</span>
                <button onClick={handleCopy} className="text-slate-400 hover:text-white transition-colors p-1 rounded-md">
                    {copied ? <CheckCircleIcon className="w-4 h-4 text-green-400" /> : <ClipboardIcon className="w-4 h-4" />}
                </button>
            </div>
            <pre className="p-4 text-sm overflow-x-auto custom-scrollbar"><code>{content}</code></pre>
        </div>
    );
};

const AccordionCard = ({ title, children, defaultOpen = false }) => {
    const [isOpen, setIsOpen] = useState(defaultOpen);
    return (
        <div className="bg-slate-800/50 rounded-lg overflow-hidden">
            <button onClick={() => setIsOpen(!isOpen)} className="w-full flex justify-between items-center text-left text-sm font-semibold text-slate-300 px-4 py-3 border-b border-slate-700/50 hover:bg-slate-700/20 transition-colors">
                <h4 dangerouslySetInnerHTML={{ __html: title }} />
                <ChevronDownIcon className={`w-5 h-5 text-slate-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
            </button>
            {isOpen && <div className="p-4 animate-fade-in">{children}</div>}
        </div>
    );
};

// --- NEW & UPDATED COMPONENTS ---
const Header = ({ onToggleNav }) => (
    <header className="bg-slate-900 border-b border-slate-800 flex-shrink-0 h-16 flex items-center px-6 justify-between z-40">
        <h1 className="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-200 to-amber-500 tracking-wide">
            Agentick Workflow
        </h1>
        <button onClick={onToggleNav} className="p-2 rounded-lg hover:bg-slate-700 text-slate-400 z-50">
            <Bars3Icon className="w-6 h-6" />
        </button>
    </header>
);

const FullScreenNav = ({ isOpen, onClose, onNavigate }) => {
    if (!isOpen) return null;
    return (
        <div className="absolute inset-0 bg-slate-900/95 backdrop-blur-md flex flex-col items-center justify-center z-50">
            <button onClick={onClose} className="absolute top-5 right-6 p-2 rounded-lg hover:bg-slate-700 text-slate-400">
                <XMarkIcon className="w-6 h-6" />
            </button>
            <nav className="flex flex-col items-center space-y-4">
                <button onClick={() => { onNavigate('home'); onClose(); }} className="text-2xl font-bold text-slate-200 hover:text-amber-400">Home</button>
                <button onClick={() => { onNavigate('settings'); onClose(); }} className="text-2xl font-bold text-slate-200 hover:text-amber-400">Agent Settings</button>
                <a href="#" className="text-2xl font-bold text-slate-200 hover:text-amber-400">Analytics</a>
                <a href="#" className="text-2xl font-bold text-slate-200 hover:text-amber-400">Documentation</a>
            </nav>
        </div>
    );
};

const FeedbackPopover = ({ type, onCancel, onSubmit }) => {
    const [text, setText] = useState('');
    const handleSubmit = () => {
        onSubmit(type, text);
    };
    return (
        <div className="absolute z-20 left-full top-0 ml-2 w-64 bg-slate-700 border border-slate-600 rounded-lg shadow-xl p-3 space-y-2">
            <textarea 
                rows="3" 
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder={`Provide ${type === 'up' ? 'positive' : 'negative'} feedback...`}
                className="w-full bg-slate-800 border border-slate-600 rounded-md py-1 px-2 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none"
            />
            <div className="flex justify-end space-x-2">
                <button onClick={onCancel} className="px-2 py-1 text-xs font-bold rounded-md bg-slate-600 hover:bg-slate-500 transition-colors">Cancel</button>
                <button onClick={handleSubmit} className="px-2 py-1 text-xs font-bold rounded-md bg-amber-500 hover:bg-amber-600 text-slate-900 transition-colors">Submit</button>
            </div>
        </div>
    );
};

const CollapsibleSidebar = ({ isVisible, onToggle, sessions, selectedSessionId, onSelectSession, onNewWorkflow, activeFeedback, onFeedbackClick, onFeedbackSubmit }) => {
    const [searchQuery, setSearchQuery] = useState("");
    const [statusFilter, setStatusFilter] = useState("All");
    const [dateFilter, setDateFilter] = useState("Any time");

    const filteredSessions = useMemo(() => {
        const now = new Date();
        let startTimeLimit = null;
        switch (dateFilter) {
            case 'Last hour': startTimeLimit = new Date(now.getTime() - 60 * 60 * 1000); break;
            case 'Last 24 hours': startTimeLimit = new Date(now.getTime() - 24 * 60 * 60 * 1000); break;
            case 'Last 7 days': startTimeLimit = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000); break;
            default: startTimeLimit = null;
        }
        return sessions
            .filter(s => statusFilter === 'All' || s.status === statusFilter)
            .filter(s => !startTimeLimit || new Date(s.start_time) >= startTimeLimit)
            .filter(s => {
                const query = searchQuery.toLowerCase();
                return s.session_id.toLowerCase().includes(query) || s.created_by.toLowerCase().includes(query);
            });
    }, [sessions, searchQuery, statusFilter, dateFilter]);

    return (
        <aside className={`bg-slate-900 border-r border-slate-800 flex flex-col h-full transition-all duration-300 ease-in-out flex-shrink-0 ${isVisible ? 'w-[320px]' : 'w-0'}`} style={{ overflow: 'hidden' }}>
            <div className="p-4 border-b border-slate-800 flex-shrink-0 flex justify-between items-center">
                <h2 className="text-xl font-bold text-white">Sessions</h2>
                <button onClick={onToggle} className="p-2 rounded-lg hover:bg-slate-700 text-slate-400">
                    <PanelLeftCloseIcon className="w-6 h-6" />
                </button>
            </div>
            <div className="p-3 border-b border-slate-800 space-y-3">
                <button onClick={onNewWorkflow} className="w-full flex items-center justify-center space-x-2 bg-amber-500 hover:bg-amber-600 text-slate-900 font-bold py-2 px-4 rounded-lg transition-colors">
                    <PlusIcon className="w-5 h-5" />
                    <span>New Workflow</span>
                </button>
                <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"><SearchIcon className="w-4 h-4 text-slate-400" /></div>
                    <input type="text" placeholder="Search sessions..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="w-full bg-slate-800 border border-slate-700 rounded-md py-2 pl-9 pr-3 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none" />
                </div>
                <div>
                    <label className="text-xs font-semibold text-slate-400">Status</label>
                    <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 mt-1">
                        {['All', 'Completed', 'In Progress', 'Failed'].map(option => (
                            <button key={option} onClick={() => setStatusFilter(option)} className={`px-2.5 py-1 text-xs font-semibold rounded-full transition-colors ${statusFilter === option ? 'bg-amber-500 text-slate-900' : 'bg-slate-700 hover:bg-slate-600 text-slate-300'}`}>{option}</button>
                        ))}
                    </div>
                </div>
                 <div>
                    <label className="text-xs font-semibold text-slate-400">Date Range</label>
                    <div className="mt-1">
                        <select value={dateFilter} onChange={(e) => setDateFilter(e.target.value)} className="w-full bg-slate-700 border border-slate-600 rounded-md py-1.5 px-2 text-xs text-white focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none">
                            {['Any time', 'Last hour', 'Last 24 hours', 'Last 7 days'].map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                    </div>
                </div>
            </div>
            <nav className="flex-1 p-2 space-y-1 overflow-y-auto custom-scrollbar">
                {filteredSessions.length > 0 ? filteredSessions.map(session => (
                    <div key={session.session_id} className="relative">
                        <div role="button" tabIndex="0" onClick={() => onSelectSession(session.session_id)} onKeyDown={(e) => e.key === 'Enter' && onSelectSession(session.session_id)} className={`w-full text-left p-3 rounded-lg transition-colors flex items-start space-x-3 group cursor-pointer ${selectedSessionId === session.session_id ? 'bg-slate-700/50' : 'hover:bg-slate-800/60'}`}>
                            <StatusIndicator status={session.status} />
                            <div className="flex-1 overflow-hidden">
                                <p className="font-semibold text-sm text-white truncate" title={session.session_id}>{session.session_id}</p>
                                <p className="text-xs text-slate-400">by {session.created_by} • {timeAgo(session.start_time)}</p>
                            </div>
                            <div className="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                <button onClick={(e) => { e.stopPropagation(); onFeedbackClick({ sessionId: session.session_id, type: 'up' }); }} className="p-1 rounded-full hover:bg-slate-600 text-slate-400 hover:text-green-400"><HandThumbUpIcon className="w-4 h-4" /></button>
                                <button onClick={(e) => { e.stopPropagation(); onFeedbackClick({ sessionId: session.session_id, type: 'down' }); }} className="p-1 rounded-full hover:bg-slate-600 text-slate-400 hover:text-red-400"><HandThumbDownIcon className="w-4 h-4" /></button>
                            </div>
                        </div>
                        {activeFeedback && activeFeedback.sessionId === session.session_id && (
                            <FeedbackPopover type={activeFeedback.type} onCancel={() => onFeedbackClick(null)} onSubmit={onFeedbackSubmit} />
                        )}
                    </div>
                )) : (
                    <div className="text-center py-10 text-slate-500"><p className="font-semibold">No Sessions Found</p><p className="text-sm">Try adjusting your filters.</p></div>
                )}
            </nav>
        </aside>
    );
};

const NewWorkflowModal = ({ isOpen, onClose }) => {
    const [isDragging, setIsDragging] = useState(false);
    const [isAIFilling, setIsAIFilling] = useState(false);
    const [formState, setFormState] = useState({
        sourceDDL: '',
        targetDDL: '',
        reconSourceSQL: '',
        reconTargetSQL: ''
    });

    if (!isOpen) return null;

    const handleAIFill = () => {
        setIsAIFilling(true);
        setTimeout(() => {
            setFormState({
                sourceDDL: 'CREATE TABLE users (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  email VARCHAR(255),\n  created_at TIMESTAMP\n);',
                targetDDL: 'CREATE TABLE customers (\n  user_id BIGINT,\n  full_name STRING,\n  email_address STRING,\n  creation_date STRING\n);',
                reconSourceSQL: 'SELECT COUNT(*) FROM users;',
                reconTargetSQL: 'SELECT COUNT(*) FROM customers;'
            });
            setIsAIFilling(false);
        }, 1500);
    };
    
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormState(prev => ({ ...prev, [name]: value }));
    };

    const handleDragOver = (e) => { e.preventDefault(); setIsDragging(true); };
    const handleDragLeave = (e) => { e.preventDefault(); setIsDragging(false); };
    const handleDrop = (e) => { e.preventDefault(); setIsDragging(false); /* Handle file drop logic */ };

    return (
        <div className="fixed inset-0 bg-slate-900/80 backdrop-blur-sm flex items-center justify-center z-50 p-4 md:p-8">
            <div className="bg-slate-800 border border-slate-700 rounded-xl shadow-2xl w-full h-full flex flex-col">
                <header className="p-4 border-b border-slate-700 flex justify-between items-center flex-shrink-0 bg-gradient-to-b from-slate-700/50 to-slate-800">
                    <h2 className="text-lg font-bold text-white">Start New Workflow</h2>
                    <button onClick={onClose} className="p-1 rounded-full hover:bg-slate-700"><XMarkIcon className="w-5 h-5" /></button>
                </header>
                <main className="p-6 space-y-6 overflow-y-auto custom-scrollbar">
                    <div>
                        <label className="text-sm font-medium text-slate-300">Upload SQL File</label>
                        <div onDragOver={handleDragOver} onDragLeave={handleDragLeave} onDrop={handleDrop} className={`mt-1 p-6 border-2 border-dashed rounded-lg text-center transition-colors ${isDragging ? 'border-amber-500 bg-amber-500/10' : 'border-slate-600 hover:border-slate-500'}`}>
                            <UploadIcon className="w-8 h-8 mx-auto text-slate-400" />
                            <p className="mt-2 text-sm text-slate-400">Drag & drop a .sql file here, or <button className="font-semibold text-amber-400 hover:underline">browse</button></p>
                        </div>
                    </div>
                    <div>
                        <label className="text-sm font-medium text-slate-300">Custom Instructions</label>
                        <textarea rows="3" placeholder="e.g., Cast all timestamp columns to strings..." className="mt-1 w-full bg-slate-700 border border-slate-600 rounded-md py-2 px-3 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none"></textarea>
                    </div>
                    <div className="text-center">
                         <button onClick={handleAIFill} disabled={isAIFilling} className="inline-flex items-center justify-center space-x-2 bg-gradient-to-r from-amber-400 to-amber-600 hover:from-amber-500 hover:to-amber-600 disabled:from-slate-600 disabled:to-slate-700 disabled:text-slate-500 text-slate-900 font-bold py-2 px-4 rounded-lg transition-all shadow-md hover:shadow-lg shadow-amber-500/20">
                            {isAIFilling ? <Spinner className="w-5 h-5" /> : <SparklesIcon className="w-5 h-5" />}
                            <span>{isAIFilling ? 'Analyzing...' : 'AI Assist'}</span>
                        </button>
                    </div>
                     <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label className="text-sm font-medium text-slate-300">Source Table Database Definitions</label>
                            <textarea name="sourceDDL" value={formState.sourceDDL} onChange={handleInputChange} rows="6" placeholder="e.g., CREATE TABLE source_table (id INT, name VARCHAR(255), ...);" className="mt-1 w-full bg-slate-700 border border-slate-600 rounded-md py-2 px-3 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none font-mono"></textarea>
                        </div>
                         <div>
                            <label className="text-sm font-medium text-slate-300">Target Table Database Definitions</label>
                            <textarea name="targetDDL" value={formState.targetDDL} onChange={handleInputChange} rows="6" placeholder="e.g., CREATE TABLE target_table (user_id BIGINT, user_name STRING, ...);" className="mt-1 w-full bg-slate-700 border border-slate-600 rounded-md py-2 px-3 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none font-mono"></textarea>
                        </div>
                    </div>
                    <div>
                        <h3 className="text-sm font-semibold text-slate-300 mb-2">Reconciliation Config <span className="text-xs font-normal text-slate-400">(Optional)</span></h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-slate-800/50 rounded-lg border border-slate-700/50">
                            <div>
                                <label className="text-sm font-medium text-slate-300">Source Table SQL</label>
                                <input name="reconSourceSQL" value={formState.reconSourceSQL} onChange={handleInputChange} type="text" className="mt-1 w-full bg-slate-700 border border-slate-600 rounded-md py-2 px-3 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none" />
                            </div>
                            <div>
                                <label className="text-sm font-medium text-slate-300">Target Table SQL</label>
                                <input name="reconTargetSQL" value={formState.reconTargetSQL} onChange={handleInputChange} type="text" className="mt-1 w-full bg-slate-700 border border-slate-600 rounded-md py-2 px-3 text-sm placeholder-slate-400 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none" />
                            </div>
                        </div>
                    </div>
                </main>
                <footer className="p-4 border-t border-slate-700 flex justify-end space-x-3 flex-shrink-0">
                    <button onClick={onClose} className="px-4 py-2 text-sm font-bold rounded-lg bg-slate-700 hover:bg-slate-600 transition-colors">Cancel</button>
                    <button className="px-4 py-2 text-sm font-bold rounded-lg bg-gradient-to-r from-amber-400 to-amber-600 hover:from-amber-500 hover:to-amber-600 text-slate-900 transition-all shadow-md hover:shadow-lg shadow-amber-500/20">Start Workflow</button>
                </footer>
            </div>
        </div>
    );
};

const FlowView = ({ sessionDetails, selectedAgentRunId, onSelectAgentRun }) => {
    const [viewMode, setViewMode] = useState('flow'); // Default to flow view
    
    const AgentIcon = ({ agentName, status }) => {
        const iconClass = "w-8 h-8";
        let SpecificIcon;
        switch (agentName) {
            case 'Converter Agent': SpecificIcon = CodeBracketSquareIcon; break;
            case 'Deployer Agent': SpecificIcon = CloudArrowUpIcon; break;
            case 'Recon Agent': SpecificIcon = ScaleIcon; break;
            case 'Analyzer Agent': SpecificIcon = LightBulbIcon; break;
            default: SpecificIcon = ClockIcon;
        }
        
        const statusClassMap = {
            'Completed': 'text-green-400', 'Failed': 'text-red-400', 'In Progress': 'text-blue-400',
            'Skipped': 'text-slate-500', 'Pending': 'text-slate-600'
        };

        return <SpecificIcon className={`${iconClass} ${statusClassMap[status] || 'text-slate-500'}`} />;
    };
    
    if (!sessionDetails) return <section className="flex-1 flex flex-col h-full border-r border-slate-800 min-w-0"></section>;

    const ListView = () => (
        <div className="flex-1 p-4 space-y-4 overflow-y-auto custom-scrollbar">
            {sessionDetails.iterations.map(iter => (
                <div key={iter.iteration_id} className="rounded-lg bg-slate-800/40 p-3">
                    <h3 className="text-sm font-bold text-amber-400 mb-2 flex items-center">
                        Iteration {iter.iteration_number}
                        {iter.needs_retry && <span className="ml-auto text-xs font-semibold text-amber-300 bg-amber-500/20 px-2 py-0.5 rounded-full">RETRY SUGGESTED</span>}
                    </h3>
                    <div className="space-y-1">
                        {iter.agent_runs.map(run => (
                            <button key={run.agent_run_id} onClick={() => onSelectAgentRun(run.agent_run_id)} className={`w-full p-2 text-left rounded-md flex items-center space-x-3 transition-colors ${selectedAgentRunId === run.agent_run_id ? 'bg-slate-700/80' : 'hover:bg-slate-700/40'}`}>
                                <div className={`flex-shrink-0 w-5 h-5`}><AgentIcon agentName={run.agent_name} status={run.status} /></div>
                                <div className="flex-1 text-sm font-medium text-slate-200">{run.agent_name}</div>
                            </button>
                        ))}
                    </div>
                </div>
            ))}
        </div>
    );

    const DiagramView = () => (
        <div className="flex-1 p-8 space-y-16 overflow-y-auto custom-scrollbar">
            {sessionDetails.iterations.map((iter, iterIndex) => (
                <div key={iter.iteration_id} className="relative">
                    <div className="flex items-center space-x-3 mb-6">
                        <div className="w-8 h-8 rounded-full bg-amber-500/20 text-amber-300 flex items-center justify-center font-bold text-sm flex-shrink-0">{iter.iteration_number}</div>
                        <h3 className="font-bold text-amber-400">Iteration {iter.iteration_number}</h3>
                    </div>
                    <div className="flex flex-wrap items-center gap-4">
                        {iter.agent_runs.map((run, runIndex) => {
                            const borderClassMap = {
                                'Completed': 'ring-green-500/50', 'Failed': 'ring-red-500/50', 'In Progress': 'ring-blue-500/50',
                                'Skipped': 'ring-slate-700', 'Pending': 'ring-slate-800'
                            };
                            const selectedClass = selectedAgentRunId === run.agent_run_id ? 'bg-slate-700 ring-amber-400 scale-105 shadow-lg shadow-amber-500/10' : 'bg-slate-800/50 hover:bg-slate-800';

                            return (
                                <React.Fragment key={run.agent_run_id}>
                                    {runIndex > 0 && <div className="w-4 md:w-12 h-0.5 bg-slate-600 flex-shrink-0"></div>}
                                    <button onClick={() => onSelectAgentRun(run.agent_run_id)} className={`flex-shrink-0 w-28 h-28 p-3 rounded-full flex flex-col justify-center items-center text-center transition-all duration-300 ring-2 ring-inset ${borderClassMap[run.status]} ${selectedClass}`}>
                                        <div className="mb-1.5"><AgentIcon agentName={run.agent_name} status={run.status} /></div>
                                        <p className={`text-xs font-semibold leading-tight ${run.status === 'Skipped' || run.status === 'Pending' ? 'text-slate-500' : 'text-slate-200'}`}>{run.agent_name}</p>
                                    </button>
                                </React.Fragment>
                            )
                        })}
                    </div>
                    {iter.needs_retry && iterIndex < sessionDetails.iterations.length - 1 && (
                        <svg className="absolute w-full h-16" style={{ top: '100%', left: '0', marginTop: '-0.5rem' }}>
                            <path d="M 144 0 V 20 C 144 30, 134 30, 124 30 H 60 C 50 30, 50 40, 50 50 V 64" stroke="#f59e0b" strokeWidth="2" fill="none" strokeDasharray="4 4" className="animate-flow" />
                            <path d="M 50 70 L 46 62 L 54 62 Z" fill="#f59e0b" />
                            <text x="75" y="48" fill="#fcd34d" fontSize="10" fontWeight="bold" textAnchor="middle">RETRY</text>
                        </svg>
                    )}
                </div>
            ))}
        </div>
    );
    
    return (
        <section className="flex-1 flex flex-col h-full border-r border-slate-800 min-w-0">
            <div className="p-4 border-b border-slate-800 flex-shrink-0 flex justify-between items-center">
                <div>
                    <h2 className="font-bold text-white text-lg truncate">{sessionDetails.session_id}</h2>
                    <p className="text-sm text-slate-400">Execution Details</p>
                </div>
                <div className="flex items-center bg-slate-800/80 p-1 rounded-lg">
                    <button onClick={() => setViewMode('list')} className={`px-2 py-1 text-xs font-semibold rounded-md flex items-center transition-colors ${viewMode === 'list' ? 'bg-amber-500/80 text-white' : 'text-slate-300 hover:bg-slate-700/50'}`}>
                        <ListBulletIcon className="w-4 h-4 mr-1.5" /> List
                    </button>
                    <button onClick={() => setViewMode('flow')} className={`px-2 py-1 text-xs font-semibold rounded-md flex items-center transition-colors ${viewMode === 'flow' ? 'bg-amber-500/80 text-white' : 'text-slate-300 hover:bg-slate-700/50'}`}>
                        <ShareIcon className="w-4 h-4 mr-1.5" /> Flow
                    </button>
                </div>
            </div>
            {viewMode === 'list' ? <ListView /> : <DiagramView />}
        </section>
    );
};

const DetailView = ({ sessionDetails, selectedAgentRunId }) => {
    const run = useMemo(() => {
        if (!sessionDetails || !selectedAgentRunId) return null;
        for (const iter of sessionDetails.iterations) {
            const foundRun = iter.agent_runs.find(r => r.agent_run_id === selectedAgentRunId);
            if (foundRun) return foundRun;
        }
        return null;
    }, [sessionDetails, selectedAgentRunId]);

    if (!run) {
        return (
            <section className="w-full max-w-md lg:max-w-lg xl:max-w-2xl bg-slate-950/50 flex-col h-full hidden md:flex">
                <div className="p-8 text-center text-slate-500 m-auto">Select an agent run to see details.</div>
            </section>
        );
    }

    const duration = run.start_time && run.end_time ? `${((new Date(run.end_time) - new Date(run.start_time)) / 1000).toFixed(2)}s` : 'N/A';
    const renderData = (data, type) => {
        if (!data || !data.input_data && !data.output_data) return <p className="text-slate-500 italic">No {type} data recorded.</p>;
        const content = data.input_data || data.output_data;
        const language = data.input_type || data.output_type;
        if (language?.includes('sql') || language?.includes('code')) return <CodeBlock language="code" content={content} />;
        if (language?.includes('json') || content?.startsWith('{')) {
            try {
                const jsonData = JSON.parse(content);
                return <CodeBlock language="json" content={JSON.stringify(jsonData, null, 2)} />;
            } catch (e) {
                return <pre className="text-sm text-slate-300 bg-slate-900 p-3 rounded-md whitespace-pre-wrap font-mono custom-scrollbar">{content}</pre>;
            }
        }
        return <pre className="text-sm text-slate-300 bg-slate-900 p-3 rounded-md whitespace-pre-wrap font-mono custom-scrollbar">{content}</pre>;
    };

    return (
        <section className="w-full max-w-md lg:max-w-lg xl:max-w-2xl bg-slate-950/50 flex-col h-full hidden md:flex">
            <div className="p-4 border-b border-slate-800 flex-shrink-0">
                <h3 className="font-bold text-white text-lg">{run.agent_name}</h3>
                <p className="text-sm text-slate-400">Agent Run Details</p>
            </div>
            <div className="flex-1 p-4 space-y-3 overflow-y-auto custom-scrollbar">
                <AccordionCard title="Status & Timings" defaultOpen={true}>
                    <ul className="text-sm space-y-1.5">
                        <li className="flex justify-between"><span>Status:</span> <span className="font-semibold text-white capitalize">{run.status}</span></li>
                        <li className="flex justify-between"><span>Start Time:</span> <span className="font-semibold text-white">{run.start_time ? new Date(run.start_time).toLocaleTimeString() : 'N/A'}</span></li>
                        <li className="flex justify-between"><span>End Time:</span> <span className="font-semibold text-white">{run.end_time ? new Date(run.end_time).toLocaleTimeString() : 'N/A'}</span></li>
                        <li className="flex justify-between"><span>Duration:</span> <span className="font-semibold text-white">{duration}</span></li>
                    </ul>
                </AccordionCard>
                {run.input && <AccordionCard title={`Input: <span class="text-xs uppercase text-slate-400 font-normal">${run.input.input_type || ''}</span>`} defaultOpen={true}>{renderData(run.input, 'input')}</AccordionCard>}
                {run.output && <AccordionCard title={`Output: <span class="text-xs uppercase text-slate-400 font-normal">${run.output.output_type || ''}</span>`} defaultOpen={true}>{renderData(run.output, 'output')}</AccordionCard>}
                {run.error_message && <AccordionCard title="Error Message" defaultOpen={true}><pre className="text-sm text-red-300 whitespace-pre-wrap font-mono">{run.error_message}</pre></AccordionCard>}
            </div>
        </section>
    );
};

const AgentSettingsPage = () => {
    const [agents, setAgents] = useState([]);
    const [selectedAgent, setSelectedAgent] = useState(null);
    const [isEditing, setIsEditing] = useState(false);
    const [promptText, setPromptText] = useState('');
    const [isSaving, setIsSaving] = useState(false);

    useEffect(() => {
        api.getAgentPrompts().then(data => {
            setAgents(data);
            if (data.length > 0) {
                setSelectedAgent(data[0]);
                setPromptText(data[0].prompt);
            }
        });
    }, []);

    const handleSelectAgent = (agent) => {
        setSelectedAgent(agent);
        setPromptText(agent.prompt);
        setIsEditing(false);
    };
    
    const handleSave = () => {
        setIsSaving(true);
        api.updateAgentPrompt(selectedAgent.id, promptText).then(() => {
            const updatedAgents = agents.map(a => a.id === selectedAgent.id ? {...a, prompt: promptText} : a);
            setAgents(updatedAgents);
            setIsEditing(false);
            setIsSaving(false);
        });
    };

    if (!selectedAgent) {
        return <div className="flex-1 flex items-center justify-center"><Spinner className="w-8 h-8"/></div>;
    }

    return (
        <div className="flex-1 flex h-full">
            <aside className="w-full max-w-xs bg-slate-900 border-r border-slate-800 flex flex-col">
                <div className="p-4 border-b border-slate-800 flex-shrink-0">
                    <h2 className="text-xl font-bold text-white">Agent Settings</h2>
                    <p className="text-sm text-slate-400">Manage system prompts</p>
                </div>
                <nav className="flex-1 p-2 space-y-1 overflow-y-auto custom-scrollbar">
                    {agents.map(agent => (
                        <button key={agent.id} onClick={() => handleSelectAgent(agent)} className={`w-full text-left p-3 rounded-lg transition-colors flex flex-col ${selectedAgent.id === agent.id ? 'bg-slate-700/50' : 'hover:bg-slate-800/60'}`}>
                            <p className="font-semibold text-sm text-white">{agent.name}</p>
                            <p className="text-xs text-slate-400">{agent.description}</p>
                        </button>
                    ))}
                </nav>
            </aside>
            <main className="flex-1 flex flex-col">
                <div className="p-4 border-b border-slate-800 flex-shrink-0 flex justify-between items-center">
                    <h3 className="font-bold text-white">{selectedAgent.name}</h3>
                    {!isEditing ? (
                        <button onClick={() => setIsEditing(true)} className="px-4 py-2 text-sm font-bold rounded-lg bg-slate-700 hover:bg-slate-600 transition-colors">Edit</button>
                    ) : (
                        <div className="flex space-x-2">
                            <button onClick={() => { setIsEditing(false); setPromptText(selectedAgent.prompt); }} className="px-4 py-2 text-sm font-bold rounded-lg bg-slate-700 hover:bg-slate-600 transition-colors">Cancel</button>
                            <button onClick={handleSave} disabled={isSaving} className="px-4 py-2 text-sm font-bold rounded-lg bg-amber-500 hover:bg-amber-600 text-slate-900 transition-colors flex items-center space-x-2 disabled:bg-amber-500/50">
                                {isSaving && <Spinner className="w-4 h-4" />}
                                <span>Save</span>
                            </button>
                        </div>
                    )}
                </div>
                <div className="flex-1 p-6 overflow-y-auto custom-scrollbar">
                    {isEditing ? (
                        <textarea 
                            value={promptText}
                            onChange={(e) => setPromptText(e.target.value)}
                            className="w-full h-full bg-slate-900 border border-slate-700 rounded-md p-4 text-sm text-slate-200 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none font-mono"
                        />
                    ) : (
                        <p className="text-sm text-slate-300 whitespace-pre-wrap font-mono">{promptText}</p>
                    )}
                </div>
            </main>
        </div>
    );
};


// --- MAIN APP COMPONENT ---
export default function App() {
    const [currentPage, setCurrentPage] = useState('home');
    const [allSessions, setAllSessions] = useState([]);
    const [selectedSessionId, setSelectedSessionId] = useState(null);
    const [sessionDetails, setSessionDetails] = useState(null);
    const [selectedAgentRunId, setSelectedAgentRunId] = useState(null);
    const [loadingSessionList, setLoadingSessionList] = useState(true);
    const [loadingSessionDetails, setLoadingSessionDetails] = useState(false);
    const [isSidebarVisible, setIsSidebarVisible] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isNavOpen, setIsNavOpen] = useState(false);
    const [activeFeedback, setActiveFeedback] = useState(null); // { sessionId: '...', type: 'up' | 'down' }

    useEffect(() => {
        api.getSessions().then(data => {
            const sortedData = data.sort((a, b) => new Date(b.start_time) - new Date(a.start_time));
            setAllSessions(sortedData);
            if (sortedData.length > 0) {
                setSelectedSessionId(sortedData[0].session_id);
            }
            setLoadingSessionList(false);
        });
    }, []);

    useEffect(() => {
        if (selectedSessionId) {
            setLoadingSessionDetails(true);
            api.getSessionDetails(selectedSessionId).then(data => {
                setSessionDetails(data);
                if (data && data.iterations.length > 0 && data.iterations[0].agent_runs.length > 0) {
                   setSelectedAgentRunId(data.iterations[0].agent_runs[0].agent_run_id);
                } else {
                   setSelectedAgentRunId(null);
                }
                setLoadingSessionDetails(false);
            });
        }
    }, [selectedSessionId]);

    const handleFeedbackSubmit = (type, text) => {
        console.log(`Feedback submitted for session ${activeFeedback.sessionId}:`);
        console.log(`Type: ${type === 'up' ? 'Positive' : 'Negative'}`);
        console.log(`Comment: ${text}`);
        setActiveFeedback(null);
    };
    
    const renderPage = () => {
        switch(currentPage) {
            case 'settings':
                return <AgentSettingsPage />;
            case 'home':
            default:
                return (
                    <div className="flex flex-1 overflow-hidden">
                        {!isSidebarVisible && (
                            <div className="flex-shrink-0 bg-slate-900 border-r border-slate-800 flex items-start justify-center pt-4">
                                <button onClick={() => setIsSidebarVisible(true)} className="p-2 rounded-lg hover:bg-slate-700 text-slate-400">
                                    <PanelLeftOpenIcon className="w-6 h-6" />
                                </button>
                            </div>
                        )}
                        <CollapsibleSidebar 
                            isVisible={isSidebarVisible}
                            onToggle={() => setIsSidebarVisible(false)}
                            sessions={allSessions} 
                            selectedSessionId={selectedSessionId} 
                            onSelectSession={setSelectedSessionId}
                            onNewWorkflow={() => setIsModalOpen(true)}
                            activeFeedback={activeFeedback}
                            onFeedbackClick={setActiveFeedback}
                            onFeedbackSubmit={handleFeedbackSubmit}
                        />
                        <main className="flex-1 flex flex-col md:flex-row overflow-hidden">
                            {loadingSessionDetails ? 
                                <div className="flex-1 flex items-center justify-center text-slate-500 border-r border-slate-800"><Spinner className="w-6 h-6" /></div> :
                                <FlowView 
                                    sessionDetails={sessionDetails} 
                                    selectedAgentRunId={selectedAgentRunId} 
                                    onSelectAgentRun={setSelectedAgentRunId}
                                />
                            }
                            {loadingSessionDetails ? 
                                <div className="w-full max-w-md lg:max-w-lg xl:max-w-2xl flex-col h-full hidden md:flex items-center justify-center text-slate-500"><Spinner className="w-6 h-6" /></div> :
                                <DetailView sessionDetails={sessionDetails} selectedAgentRunId={selectedAgentRunId} />
                            }
                        </main>
                    </div>
                );
        }
    };

    if (loadingSessionList) {
        return (
            <div className="w-full h-full flex flex-col items-center justify-center bg-slate-950 text-slate-400">
                <Spinner className="w-8 h-8" />
                <p className="mt-4 text-lg font-semibold">Initializing Command Center...</p>
            </div>
        )
    }

    return (
        <div className="text-slate-300 flex flex-col h-screen w-full overflow-hidden bg-slate-900">
            <Header onToggleNav={() => setIsNavOpen(!isNavOpen)} />
            <FullScreenNav isOpen={isNavOpen} onClose={() => setIsNavOpen(false)} onNavigate={setCurrentPage} />
            {renderPage()}
            <NewWorkflowModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />
        </div>
    );
}

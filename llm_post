Blog Post: Choosing the Right Approach: Metadata Management with LLMs vs. Cube.js Semantic Layer
Introduction
In the ever-evolving world of data analytics, the intersection of natural language processing and SQL query generation is becoming increasingly important. As businesses strive to democratize data access, they face the challenge of making complex data systems accessible to non-technical users. This has led to two primary approaches: directly feeding metadata to Large Language Models (LLMs) or using a semantic layer like Cube.js.

In this post, we’ll explore the pros and cons of each approach and help you decide which might be best suited for your organization.

The Traditional Approach: Feeding Metadata Directly to LLMs
The traditional approach involves providing LLMs with detailed metadata—information about your data schema, business logic, and calculations. The LLM uses this metadata to generate SQL queries in response to natural language queries.

How It Works
Centralized Metadata Repository: Store all relevant information (table schemas, calculation logic, business rules) in a centralized location, such as a Confluence page or GitHub repository.
LLM Integration: The LLM is fed this metadata, either during its training or dynamically at runtime, to understand and apply the business logic when generating SQL queries.
Query Generation: When a user asks a question, the LLM references the metadata to construct the correct SQL query, which is then executed against the database.
Pros
Reduced Dependencies: By embedding all business logic into the LLM, you eliminate the need for an additional semantic layer, simplifying the overall system architecture.
Flexibility: The LLM can dynamically generate SQL queries based on the latest metadata, allowing for quick adjustments to business logic without needing to update multiple systems.
Lower Latency: Directly feeding the LLM with metadata can reduce the time taken to generate and execute SQL queries, as there’s no need to pass through an intermediary layer.
Cons
Consistency Challenges: Without a centralized semantic layer like Cube.js, ensuring that all queries apply business logic consistently across the organization can be difficult.
Complex Metadata Management: Maintaining a comprehensive and up-to-date metadata repository is crucial but can be challenging, especially in dynamic environments where business logic changes frequently.
LLM Limitations: LLMs may misinterpret or inaccurately apply complex logic, leading to incorrect query generation. Debugging and transparency can also be problematic since the process is less explicit than in a structured semantic layer.
Use Case Example
A company with a relatively simple data environment and a small team of data users might find this approach advantageous. If the business logic is straightforward and doesn’t change often, managing it within the LLM can be efficient.

The Modern Approach: Using Cube.js Semantic Layer
Cube.js offers a semantic layer that abstracts the complexity of SQL by defining a high-level representation of your data. This semantic layer sits between your raw data and the LLM, providing a structured environment where business logic and calculations are predefined.

How It Works
Define Business Logic in Cube.js: Create a semantic layer in Cube.js where all measures, dimensions, and relationships are predefined using a structured format like YAML.
LLM Integration: The LLM interacts with Cube.js, which provides the necessary context for generating SQL queries based on user queries.
Query Generation: When a user asks a question, the LLM uses the semantic layer to generate accurate SQL queries, ensuring consistency across all queries.
Pros
Consistency and Governance: Cube.js ensures that all SQL queries apply business logic consistently across the organization. This is especially valuable in larger organizations with complex data environments.
Transparency and Debugging: The structured nature of Cube.js makes it easier to trace, debug, and audit the SQL queries being generated, providing a higher level of transparency.
Scalability: Cube.js is designed to handle complex datasets and large-scale operations, making it suitable for growing organizations with evolving data needs.
Cons
Increased Complexity: Adding a semantic layer introduces an additional component into your data architecture, which can increase complexity and require additional management.
Dependency on Cube.js: Organizations become reliant on Cube.js for maintaining and updating the semantic layer, which can be seen as a dependency, particularly if the organization’s needs change.
Potential Latency: The additional processing step introduced by the semantic layer might add some latency to the query generation process, though this is often outweighed by the benefits of consistency and governance.
Use Case Example
A large enterprise with multiple teams accessing the same datasets would benefit from using Cube.js. The need for consistent application of business logic across various departments makes Cube.js an essential tool for maintaining data integrity.

Visualizing the Approaches
To better understand the differences between these two approaches, let’s visualize them:

1. Traditional Approach: Metadata Directly to LLMs

Imagine a straightforward pipeline where the LLM directly interacts with the database using the metadata you’ve provided. The LLM reads the metadata, interprets it, and generates SQL queries based on the natural language queries it receives.

2. Modern Approach: Using Cube.js Semantic Layer

Here, the process involves an additional step where the LLM queries Cube.js, which then references its semantic layer to generate the correct SQL. The LLM doesn’t need to handle the business logic directly, as Cube.js ensures that all SQL queries are consistent and accurate.

Comparative Analysis: Which Approach is Right for You?
When deciding between these approaches, consider the following factors:

Complexity of Your Data Environment:

If your data environment is relatively simple and stable, directly feeding metadata to the LLM might be sufficient.
For complex, dynamic environments with multiple stakeholders, Cube.js’s semantic layer offers consistency and scalability.
Organizational Size and Needs:

Smaller organizations or teams may prefer the simplicity and reduced overhead of managing business logic within the LLM.
Larger organizations with more complex governance needs will benefit from the structured approach provided by Cube.js.
Maintenance and Flexibility:

Directly managing metadata in the LLM offers flexibility but requires diligent maintenance and updating.
Cube.js provides a centralized, structured environment that might require less frequent updates and ensures that all changes are consistently applied across the board.
Long-Term Scalability:

As your organization grows, maintaining business logic within the LLM might become cumbersome. Cube.js’s ability to scale with your data environment makes it a future-proof solution.
Conclusion
Both approaches have their merits and can be effective depending on your specific use case. The key is to balance the need for flexibility, consistency, and scalability within your organization. For smaller teams or simpler data environments, feeding metadata directly to an LLM might be the most efficient approach. However, for larger, more complex environments, Cube.js’s semantic layer offers critical benefits in terms of governance, consistency, and long-term scalability.

Ultimately, the choice depends on your organization's specific needs, resources, and long-term goals. Understanding the trade-offs and benefits of each approach will help you make an informed decision that supports your data strategy now and in the future.


Adding Context Based on User Query
When demonstrating the usage of Cube.js views, you can dynamically decide which view to expose depending on the query's context. Here's how you can explain it in your demo:

1. When the Query Involves Only Orders and Users
Example User Query: "Show me all orders placed by users in the last month."

In this case, you can restrict the context by using the ecom_view, which contains only relevant data about orders and users, without including unnecessary data like products or order items.

Shared View: ecom_view

Why: Since the query only asks about orders and users, using the ecom_view keeps things efficient and avoids providing unnecessary data, such as product details.

Example Query using ecom_view:

sql
Copy code
SELECT 
  Orders.id AS orderId,
  Users.name AS userName,
  Orders.status AS orderStatus,
  Orders.created_at AS orderDate
FROM Orders
JOIN Users ON Orders.user_id = Users.id
WHERE Orders.created_at >= NOW() - INTERVAL 1 MONTH;
2. When the Query Involves Products
Example User Query: "Show me all users who purchased products from the electronics category last month."

In this case, you'll need to expose more data, so using the customers_view is more appropriate. This view not only includes orders and users but also the necessary products and order items information.

Shared View: customers_view

Why: The query includes products, so providing the customers_view ensures all relevant relationships between users, orders, and products are available.

Example Query using customers_view:

sql
Copy code
SELECT 
  Users.name AS userName,
  Orders.id AS orderId,
  Products.name AS productName,
  OrderItems.quantity AS quantity,
  Orders.created_at AS orderDate
FROM Orders
JOIN Users ON Orders.user_id = Users.id
JOIN OrderItems ON Orders.id = OrderItems.order_id
JOIN Products ON OrderItems.product_id = Products.id
WHERE Products.category = 'electronics'
AND Orders.created_at >= NOW() - INTERVAL 1 MONTH;


+--------------------+        +--------------------+        +---------------------+
|      Users         |        |      Orders        |        |      Products        |
|--------------------|        |--------------------|        |---------------------|
| userId (PK)        |<------>| user_id (FK)       |        | productId (PK)       |
| userName           |        | orderId (PK)       |        | productName          |
| userEmail          |        | orderStatus        |        | productCategory      |
| userStatus         |        | orderCreatedAt     |        | productPrice         |
| userCreatedAt      |        | totalOrderAmount   |        | stockQuantity        |
+--------------------+        +--------------------+        +---------------------+
                                    ^                        
                                    |                        
                                    |                        
                           +--------------------+            
                           |    Order Items     |<----------> +---------------------+
                           |--------------------|            |      Products        |
                           | orderItemId (PK)   |            |---------------------|
                           | orderId (FK)       |            | productId (FK)       |
                           | productId (FK)     |            | productName          |
                           | itemPrice          |            | productCategory      |
                           | itemQuantity       |            | productPrice         |
                           +--------------------+            | stockQuantity        |
                                                             +---------------------+

+--------------------+        +--------------------+
|    ecom_view       |        |   customers_view   |
|--------------------|        |--------------------|
| Includes:          |        | Includes:          |
| Orders, Users      |        | Orders, Users,     |
| (excludes company) |        | Order Items,       |
|                    |        | Products           |
+--------------------+        +--------------------+
